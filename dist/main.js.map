{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;AACyD;;;;AAQlD,MAAM,YAAY;IACvB,YAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAChD,CAAC;IACD,eAAe;QACb,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;IACtC,CAAC;;wEALU,YAAY;0GAAZ,YAAY,yGAFZ,CAAC,kEAAa,CAAC;QCP5B,2EAAgC;;;;;;;;;;;;;;;;;;;;;;;;ACA0B;AAEX;AACI;AACT;AACqC;AACxB;AACA;;;AAiBhD,MAAM,SAAS;;kEAAT,SAAS;sGAAT,SAAS,cAFR,wDAAY;2GADb,EAAE,YARJ;YACP,oEAAa;YACb,mDAAU;YACV,iEAAe;YACf,oEAAkB,EAAE;YACpB,iEAAS;YACT,yFAAuB;SACxB;mIAIU,SAAS,mBAblB,wDAAY,aAGZ,oEAAa;QACb,mDAAU;QACV,iEAAe,gEAEf,iEAAS;QACT,yFAAuB;;;;;;;;;;;;;;;;;;;AClB4B;AACR;AACgB;;;AAE/D,MAAM,SAAS,GAAW;IACxB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wDAAY;KACxB;IACD;QACE,IAAI,EAAE,0FAAkC,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,6KAAsC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;KACnI;CACF,CAAC;AAMK,MAAM,UAAU;;oEAAV,UAAU;uGAAV,UAAU;2GAHZ,CAAC,iEAAoB,CAAC,SAAS,CAAC,CAAC,EAChC,yDAAY;mIAEX,UAAU,oFAFX,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAGC;AAIS;AAGO;AAGT;AAGI;AAGH;AAGD;AAGM;AAGJ;AAMI;AAGD;AAGL;AAGC;AAGI;AAGO;AAGV;AAGC;AAGE;AAGL;AAGC;AAGE;AAGF;AAGO;AAGR;;AAyFzB,MAAM,cAAc;IACvB;QACI,iDAAiD;IACrD,CAAC;;4EAHQ,cAAc;2GAAd,cAAc;+GA3Ed;YACL;;eAEG;YACH,4EAAkB;YAClB,mEAAc;YACd,iEAAa;YACb,uEAAgB;YAChB,qEAAe;YACf,mEAAc;YACd,kEAAa;YACb,oEAAc;YACd,4EAAkB;YAClB,0EAAiB;YACjB,wEAAgB;YAChB,kEAAa;YACb,sEAAe;YACf,8EAAmB;YACnB,wEAAmB;YACnB,2EAAiB;YACjB,mFAAqB;YACrB,sEAAe;YACf,yFAAwB;YACxB,2EAAiB;YACjB;;eAEG;YACH;;eAEG;YACH,gEAAmB;YACnB,0DAAY;YACZ,wDAAW;SACd;QAGG;;WAEG;QACH,4EAAkB;QAClB,mEAAc;QACd,iEAAa;QACb,uEAAgB;QAChB,qEAAe;QACf,mEAAc;QACd,kEAAa;QACb,oEAAc;QACd,4EAAkB;QAClB,0EAAiB;QACjB,wEAAgB;QAChB,kEAAa;QACb,sEAAe;QACf,8EAAmB;QACnB,wEAAmB;QACnB,2EAAiB;QACjB,mFAAqB;QACrB,sEAAe;QACf,yFAAwB;QACxB,2EAAiB;QAOjB;;WAEG;QACH,gEAAmB;QACnB,0DAAY;QACZ,wDAAW;mIAKN,cAAc;QArFnB;;WAEG;QACH;;WAEG;QACH,uEAAmB;QACnB,qEAAkB;QAClB,oFAAyB;QAGzB;;WAEG;QACH,4EAAkB;QAClB,mEAAc;QACd,iEAAa;QACb,uEAAgB;QAChB,qEAAe;QACf,mEAAc;QACd,kEAAa;QACb,oEAAc;QACd,4EAAkB;QAClB,0EAAiB;QACjB,wEAAgB;QAChB,kEAAa;QACb,sEAAe;QACf,8EAAmB;QACnB,wEAAmB;QACnB,2EAAiB;QACjB,mFAAqB;QACrB,sEAAe;QACf,yFAAwB;QACxB,2EAAiB;QACjB;;WAEG;QACH;;WAEG;QACH,gEAAmB;QACnB,0DAAY;QACZ,wDAAW;QAIX;;WAEG;QACH,4EAAkB;QAClB,mEAAc;QACd,iEAAa;QACb,uEAAgB;QAChB,qEAAe;QACf,mEAAc;QACd,kEAAa;QACb,oEAAc;QACd,4EAAkB;QAClB,0EAAiB;QACjB,wEAAgB;QAChB,kEAAa;QACb,sEAAe;QACf,8EAAmB;QACnB,wEAAmB;QACnB,2EAAiB;QACjB,mFAAqB;QACrB,sEAAe;QACf,yFAAwB;QACxB,2EAAiB;QACjB;;WAEG;QACH,uEAAmB;QACnB,qEAAkB;QAClB,oFAAyB;QACzB;;WAEG;QACH,gEAAmB;QACnB,0DAAY;QACZ,wDAAW;;;;;;;;;;;;;;;;;;;;;;;;;;IEjKjB,+EAA6F;;;;IAArD,4FAAyB;;;IACjE,gFAAkG;;;;IAAtD,4FAAyB;;;IAFtE,yEAAkF;IACjF,iJAA6F;IAC7F,mJAAkG;IACnG,4DAAM;;;IAHuC,gGAAoC;IAC/D,0DAAqB;IAArB,iFAAqB;IACpB,0DAAwB;IAAxB,oFAAwB;;ADe5C;;;GAGG;AACI,MAAM,yBAAyB;IAOrC,QAAQ;QACP,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;IACnC,CAAC;;kGAVW,yBAAyB;uHAAzB,yBAAyB;QCzBtC,8EAA2D;QAEzD,0EACD;QAAA,4DAAK;QACL,qHAGM;;QACP,4DAAW;;QAJa,0DAAoB;QAApB,gJAAoB;;;;;;;;;;;;;;;;;;;;;;ACErB;;;;;;;;ICLK,0EAAiD;IAAA,qEAAU;IAAA,4DAAO;;;IAO5F,sEAAiC;IAChC,uDACD;IAAA,4DAAM;;;IADL,0DACD;IADC,gGACD;;ADaF;;;;GAIG;AACI,MAAM,mBAAmB;IAXhC;QAckB,gBAAW,GAAG,IAAI,uDAAY,EAAW,CAAC;KAU3D;IANA,QAAQ;QACP,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAgB,CAAC;IACtE,CAAC;IACD,mBAAmB,CAAC,MAAM;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;;sFAZW,mBAAmB;iHAAnB,mBAAmB;QC5BhC,oFAA8C;QAClC,uDAAgB;QAAA,iHAAkE;QAAA,4DAAY;QACzG,0EAAgB;QAAA,uDAAgB;QAAA,4DAAO;QACvC,8EACiG;QADtD,mJAAS,+BAA2B,IAAC;QACkB;QAAA,4DAAW;QAC7G,2EAAU;QAAA,uDAAc;QAAA,4DAAW;QACnC,+EAAoB;QAAA,wDAAc;QAAA,4DAAW;QAC7C,6EAAW;QACV,iHAEM;QACP,4DAAY;;QAVD,0DAAgB;QAAhB,0FAAgB;QAAO,0DAAuB;QAAvB,uFAAuB;QACzC,0DAAgB;QAAhB,iFAAgB;QAE6B,0DAAmC;QAAnC,yGAAmC;QADtF,oFAAuB;QAEvB,0DAAc;QAAd,+EAAc;QACJ,0DAAc;QAAd,+EAAc;QAE3B,0DAAyB;QAAzB,oFAAyB;;;;;;;;;;;;;;;;;;;;;;ACFV;;;;;;;;ICLK,0EAAiD;IAAA,qEAAU;IAAA,4DAAO;;;IAO5F,sEAAiC;IAChC,uDACD;IAAA,4DAAM;;;IADL,0DACD;IADC,gGACD;;ADaK,MAAM,kBAAkB;IAN/B;QAUkB,gBAAW,GAAG,IAAI,uDAAY,EAAW,CAAC;KAW3D;IANA,QAAQ;QACP,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAgB,CAAC;IACtE,CAAC;IACD,mBAAmB,CAAC,MAAM;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;;oFAdW,kBAAkB;gHAAlB,kBAAkB;QCvB/B,oFAA8C;QAClC,uDAAgB;QAAA,gHAAkE;QAAA,4DAAY;QACzG,0EAAgB;QAAA,uDAAgB;QAAA,4DAAO;QACvC,2EACiG;QAD3C,+IAAS,+BAA2B,IAAC;QAA3F,4DACiG;QACjG,2EAAU;QAAA,uDAAc;QAAA,4DAAW;QACnC,8EAAoB;QAAA,wDAAc;QAAA,4DAAW;QAC7C,6EAAW;QACV,gHAEM;QACP,4DAAY;;QAVD,0DAAgB;QAAhB,0FAAgB;QAAO,0DAAuB;QAAvB,uFAAuB;QACzC,0DAAgB;QAAhB,iFAAgB;QAE6B,0DAAmC;QAAnC,yGAAmC;QADzF,0EAAa;QAEV,0DAAc;QAAd,+EAAc;QACJ,0DAAc;QAAd,+EAAc;QAE3B,0DAAyB;QAAzB,oFAAyB;;;;;;;;;;;;;;;;;;ACL1B,MAAM,YAAY;IADzB;QAEI,QAAG,GAAG,yBAAyB,CAAC;KACnC;;wEAFY,YAAY;6GAAZ,YAAY,WAAZ,YAAY,mBADC,MAAM;;;;;;;;;;;;;;;;;;;ACWhC,MAAM,IAAI,GAAG,OAAO,CAAC;AACrB,MAAM,KAAK,GAAG,QAAQ,CAAC;AAOhB,MAAM,aAAa;IACxB,YAAoB,EAAiB;QAAjB,OAAE,GAAF,EAAE,CAAe;QAC7B,WAAM,GAAG,IAAI,GAAG,EAAmB,CAAC;QACpC,eAAU,GAAG,EAAE,CAAC;QAChB,oBAAe,GAAG,EAAE,CAAC;IAHW,CAAC;IAKlC,QAAQ,CAAC,KAAa;QAC3B,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAmB;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;IACD;;;OAGG;IACI,MAAM;QACX,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC;IAC3B,CAAC;IACD;;;;;;OAMG;IACI,QAAQ,CAAC,GAAW,EAAE,KAAU;QACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC5B,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SAChC;aAAM;YACL,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;SACpD;IACH,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,GAAW;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC;SACd;QACD,MAAM,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,CAAC,EAAE;YACN,OAAO,CAAC,CAAC;SACV;QACD,KAAK,GAAG,CAAC,CAAC;QACV,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC5B,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAW,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAkB,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,MAAc;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;;0EAxFU,aAAa;8GAAb,aAAa,WAAb,aAAa,mBAHZ,MAAM;;;;;;;;;;;;;;;AClBpB;;;GAGG;AACI,MAAM,WAAW;;AACpB;;GAEG;AACC,0BAAc,GAAG,IAAI,CAAC;AACtB,uBAAW,GAAG,eAAe,CAAC;AAElC;;GAEG;AACI,wBAAY,GAAG,UAAU,CAAC;AAC7B,sBAAU,GAAG,OAAO,CAAC;AACrB,oBAAQ,GAAG,MAAM,CAAC;AAClB,oBAAQ,GAAG,MAAM,CAAC;AAClB,wBAAY,GAAG,SAAS,CAAC;AACzB,0BAAc,GAAG,YAAY,CAAC;AAC9B,2BAAe,GAAG,MAAM,CAAC;AACzB,4BAAgB,GAAG,OAAO,CAAC;AACxB,+BAAmB,GAAG,SAAS,CAAC;AAEtC;;EAEE;AACW,wBAAY,GAAG,MAAM,CAAC;AACpC;;GAEA;AACO,oBAAQ,GAAG,KAAK,CAAC;AACjB,kBAAM,GAAG,QAAQ,CAAC;AAClB,qBAAS,GAAG,QAAQ,CAAC;AACrB,qBAAS,GAAG,QAAQ,CAAC;AACrB,qBAAS,GAAG,QAAQ,CAAC;AACrB,mBAAO,GAAG,MAAM,CAAC;AAE3B;;GAEG;AACO,qBAAS,GAAG,GAAG,CAAC;AAChB,qBAAS,GAAG,IAAI,CAAC;AACjB,qBAAS,GAAG,IAAI,CAAC;AACjB,qBAAS,GAAG,GAAG,CAAC;AAChB,qBAAS,GAAG,IAAI,CAAC;AACjB,qBAAS,GAAG,GAAG,CAAC;AAChB,0BAAc,GAAG,IAAI,CAAC;AACtB,8BAAkB,GAAG,GAAG,CAAC;AACzB,2BAAe,GAAG,GAAG,CAAC;AAE7B;;GAEG;AACI,qBAAS,GAAG,CAAC,CAAC;AACjB,wBAAY,GAAG,CAAC,CAAC;AACjB,wBAAY,GAAG,CAAC,CAAC;AACjB,wBAAY,GAAG,CAAC,CAAC;AACjB,qBAAS,GAAG,CAAC,CAAC;AACd,0BAAc,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;AC1DsB;AAIjD;;GAEG;AACI,MAAe,IAAI;IAyCzB;QANA;;WAEG;QACI,gBAAW,GAAG,KAAK,CAAC;QAIzB,8CAA8C;IAChD,CAAC;IAMD;;;OAGG;IACI,WAAW,CAAC,WAAyB;QAC3C,OAAO,IAAI,+CAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,WAAyB;QAC5C,OAAO,IAAI,gDAAS,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACzC,CAAC;IACD;;;;OAIG;IACI,cAAc,CAAC,SAAiB;QACtC,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;YAC9B,OAAO,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;SACxC;QACD,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,SAAS,GAAG,uBAAuB,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACnF,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;;OAIG;IACI,SAAS,CAAC,SAAiB;QACjC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAClD,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,uBAAuB,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;QACzF,OAAO,KAAK,CAAC;IACd,CAAC;CACD;;;;;;;;;;;;;;;;;;;;;;;ACjGoE;AAIzB;AACV;AACe;AACd;AAI5B,MAAM,SAAS;IAsClB,YAA4B,IAAU,EAAqB,WAAyB;QAAxD,SAAI,GAAJ,IAAI,CAAM;QAAqB,gBAAW,GAAX,WAAW,CAAc;QArCpF;;UAEE;QACF,SAAI,GAAO,EAAE,CAAC;QACjB;;WAEI;QACD,cAAS,GAAsC,IAAI,GAAG,EAAE,CAAC;QACzD;;UAEE;QACF,qBAAgB,GAA6B,IAAI,GAAG,EAAE,CAAC;QACvD;;;WAGG;QACH,6BAAwB,GAAY,KAAK,CAAC;QAC1C;;aAEK;QACL,WAAM,GAAa,EAAE,CAAC;QACtB;;WAEG;QACH,aAAQ,GAAa,EAAE,CAAC;QAExB;;WAEG;QACH,SAAI,GAAa,EAAE,CAAC;QAOV,UAAK,GAAG,KAAK,CAAC;QAEpB,IAAI,CAAC,SAAS,GAAG,IAAI,qDAAS,CAAC,EAAE,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO;SACV;QAED,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAgB,EAAE,GAAW,EAAE,EAAE;YACtD,IAAI,KAAK,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;aAC9F;iBAAM;gBACH,IAAI,KAAK,CAAC,UAAU,EAAE;oBAClB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;iBAClE;qBAAM;oBACH,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;iBACnE;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACI,UAAU;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED;;;MAGE;IACK,MAAM,CAAC,IAAQ;QAClB,IAAI,CAAC,IAAI,EAAE;YACP,IAAI,GAAG,EAAE,CAAC;SACb;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACnC;QAED,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;YAC/B,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAO,IAAI,EAAE,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACzC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAS,IAAI,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGA;IACO,UAAU;QACb,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;YAC/B,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACzC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,CAAC;IACb,CAAC;IAED;;;OAGA;IACO,gBAAgB;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,IAAY,EAAE,KAAuC;QACtE,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,EAAE,EAAE;YACJ,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACI,cAAc,CAAC,MAAmB;QACrC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;QAKI;IACG,aAAa,CAAC,IAAY;QAC7B,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,EAAE,EAAE;YACJ,OAAO,EAAE,CAAC,KAAK,CAAC;SACnB;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAA8B,CAAC;IACxD,CAAC;IAED;;;OAGG;IACI,cAAc,CAAC,KAAe;QACjC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,IAAY;QAC5B,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,IAAY;QAC7B,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,gBAAgB;QACnB,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACnD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAClD;QACD,OAAO,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACnC,CAAC;IAEM,aAAa,CAAC,MAAgB;QACjC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAC3B,OAAO,IAAI,CAAC;SACf;QACD,MAAM,IAAI,GAAgB,EAAE,CAAC;QAC7B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IACD;;OAEG;IACI,aAAa;QAChB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,QAAmB;QAClC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE;YAC9B,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACnB,QAAQ,GAAG,CAAC,IAAI,EAAE;oBACd,KAAK,OAAO;wBACR,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC3B,MAAM;oBACV,KAAK,SAAS;wBACV,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC7B,MAAM;oBACV;wBACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACzB,MAAM;iBACb;YACL,CAAC,CAAC,CAAC;SACN;aAAM;YACH,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,QAAQ,CAAC,CAAC;SAClE;IACL,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,WAAmB,EAAE,IAAiB;QACrD,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CACxG,mDAAG,CAAC,EAAE,CAAC,EAAE;YACL,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAChB,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,IAAI,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IACD;;;MAGE;IACK,SAAS;QACZ,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,8DAAoB,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,8DAAoB,GAAG,wBAAwB,CAAC,CAAC;SACjF;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,MAAM,GAAG,GAAG,+CAA+C,CAAC;YAC5D,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,uDAAqB,CAAC,GAAG,CAAC,CAAC;SACrC;QAED,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,IAAiB;QAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,8DAAoB,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,8DAAoB,GAAG,wBAAwB,CAAC,CAAC;SACjF;QAED,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,KAAa,EAAE,OAAsB;QACtD,MAAM,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,EAAE,EAAE;YACL,MAAM,GAAG,GAAG,KAAK,GAAG,4DAA4D,CAAC;YACjF,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,uDAAqB,CAAC,GAAG,CAAC,CAAC;SACrC;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;QACvD,MAAM,WAAW,GAAG,SAAS,CAAC,cAAc,CAAC,+DAAqB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,+DAAqB,GAAG,yBAAyB,CAAC,CAAC;SACnF;QAED,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAC9D,mDAAG,CAAC,EAAE,CAAC,EAAE;YACL,MAAM,IAAI,GAAG,EAAE,CAAC,IAAY,CAAC;YAC7B,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAChB,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,IAAI,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,OAAuB;QACjC,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,+DAAqB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,+DAAqB,GAAG,4BAA4B,CAAC,CAAC;SACtF;QACD,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACjD,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;QACtC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,IAAI,CACpD,mDAAG,CAAC,EAAE,CAAC,EAAE;YACL,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,OAAO,EAAE,CAAC,IAAY,CAAC;QAC3B,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,IAAI,CAAC;YACnD,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,IAAI,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,IAAU;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,6DAAmB,CAAC,CAAC;QAClE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,6DAAmB,GAAG,4BAA4B,CAAC,CAAC;SACpF;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QAErC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CACrE,mDAAG,CAAC,GAAG,CAAC,EAAE;YACN,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,IAAI,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED;;OAEG;IACI,YAAY;QACf,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAC;QACxC,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,EAAE,EAAE;YACL,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,sCAAsC,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;SAClH;QAED,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;YAC1B,MAAM,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;YAC5B,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACpC,MAAM,CAAC,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;YAC/B,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,gBAAgB;QACnB,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YACtB,OAAO,MAAM,CAAC;SACjB;QACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YACzD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACpB;QACL,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IACD;;OAEG;IACI,SAAS;QACZ,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,4DAAkB,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,4DAAkB,GAAG,4BAA4B,CAAC,CAAC;SACnF;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACtB,iEAAiE;YACjE,OAAO,uDAAqB,CAAC,iEAAiE,CAAC,CAAC;SACnG;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CACnF,mDAAG,CAAC,EAAE,CAAC,EAAE;YACL,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACzB,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACpD,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,cAAc,CAAC,IAAW;QAC7B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACnB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YACrE,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,IAAI;QACP,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,+DAAqB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,+DAAqB,GAAG,4BAA4B,CAAC,CAAC;SACtF;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACtB,iEAAiE;YACjE,OAAO,uDAAqB,CAAC,2BAA2B,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACjG;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CACnF,mDAAG,CAAC,EAAE,CAAC,EAAE;YACL,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,yCAAyC;YACzC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,IAAI,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED;;OAEG;IACI,MAAM;QACT,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,+DAAqB,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,+DAAqB,GAAG,4BAA4B,CAAC,CAAC;SACtF;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CACjF,mDAAG,CAAC,EAAE,CAAC,EAAE;YACL,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,mCAAmC;YACnC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,IAAI,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED;;;;;;;OAOG;IACI,SAAS,CAAC,OAAa,EAAE,IAAS,EAAE,EAAgB;QACvD,IAAI,OAAO,GAAe,EAAE,CAAC;QAC7B,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YACjB,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAChC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACd,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACnB,CAAC;IAGD;;;;;OAKG;IACI,SAAS,CAAC,OAAmB;QAChC,IAAI,OAAO,GAAS,EAAE,CAAC;QACvB,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QAClC,CAAC,CAAC;QACF,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ;AACD;;GAEG;AACI,MAAM,QAAS,SAAQ,SAAS;IAOnC,YAAY,CAAO,EAAE,EAAgB;QACjC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACpC,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YAClC,MAAM,EAAE,GAAG,IAAI,uDAAW,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAEM,QAAQ,CAAC,IAAY,EAAE,IAAoB;QAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,oDAAoD,CAAC,CAAC;YAC3E,OAAO;SACV;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YACd,IAAI,KAAK,GAAQ,EAAE,CAAC;YACpB,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;gBACjB,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aACzB;YACD,IAAI,KAAK,EAAE;gBACP,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACzB;SACJ;IACL,CAAC;IACD;;;;;OAKA;IACO,aAAa,CAAC,KAAY,EAAE,GAAW;QAC1C,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,GAAG,EAAE;YACvB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC9B,OAAO;SACV;QACD,IAAI,KAAK,CAAC,SAAS,EAAE;YACjB;;eAEG;YACH,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,CAAC,GAAG,EAAE;gBACN,OAAO,CAAC,KAAK,CAAC,iEAAiE,GAAG,GAAG,CAAC,CAAC;gBACvF,GAAG,GAAG,EAAE,CAAC;aACZ;YACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAC/B,OAAO;SACV;QAED;;WAEG;QACH,IAAI,IAAS,CAAC;QACd,IAAI,KAAK,CAAC,OAAO,EAAE;YACf,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;SAC7C;aAAM;YACH,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC;SACnC;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,kEAAwB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7E,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;YACf,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,CAAmB,CAAC;YACzC,IAAI,GAAG,EAAE;gBACL,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;aAClC;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,iFAAiF,GAAG,KAAK,CAAC,IAAI,CAAC;aAChH;QACL,CAAC,EAAE,IAAI,CAAC,EAAE;YACN,OAAO,CAAC,KAAK,CAAC,8CAA8C,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,CAAO;QAC3B,IAAI,CAAC,CAAC,CAAC,UAAU,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,KAAK,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;aACvC;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBACvB,IAAI,KAAK,CAAC,OAAO,EAAE;oBACf,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAgB,CAAC;oBAC5D,IAAI,CAAC,EAAE,EAAE;wBACL,OAAO,CAAC,KAAK,CAAC,oCAAoC,GAAG,KAAK,CAAC,OAAO,GAAG,uBAAuB,GAAG,KAAK,CAAC,IAAI,GAAG,yBAAyB,CAAC,CAAC;qBAC1I;yBAAM;wBACH,MAAM,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;wBACrB,IAAI,GAAG,EAAE;4BACL,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;yBAClC;wBACD,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;qBAClF;iBACJ;qBAAM;oBACH,2DAA2D;oBAC3D,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;iBACnC;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;OAEG;IACI,YAAY;QACf,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,CAAC,CAAC;YAClE,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;YAClC,OAAO,KAAK,CAAC;SAChB;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,IAAI,EAAE;YACN,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACnC;;mBAEG;gBACH,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;gBAChB,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;gBAChB,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACpC,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACpC,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAClC,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAClC,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAClC,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAElC,IAAI,UAAU,GAAG,KAAK,CAAC;gBACvB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,SAAS,IAAI,+DAAqB,IAAI,EAAE,CAAC,SAAS,IAAI,+DAAqB,EAAE;oBAC5F,UAAU,GAAG,IAAI,CAAC;iBACrB;gBACD,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC;gBACvB,IAAI,EAAW,CAAC;gBAChB,IAAI,OAAO,KAAK,OAAO,EAAE;oBACrB,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;iBAC3D;qBAAM,IAAI,OAAO,KAAK,MAAM,EAAE;oBAC3B,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;iBAC/C;qBAAM,IAAI,OAAO,KAAK,MAAM,EAAE;oBAC3B,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC;iBACpD;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,uBAAuB,GAAG,OAAO,GAAG,mCAAmC,CAAC,CAAC;oBACvF,EAAE,GAAG,IAAI,CAAC;iBACb;gBACD,IAAI,CAAC,EAAE,EAAE;oBACL,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;oBAC/C,MAAM,GAAG,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;oBACxD,IAAI,EAAE,IAAI,EAAE,CAAC,WAAW,IAAI,QAAQ,IAAI,EAAE,CAAC,WAAW,IAAI,QAAQ,EAAE;wBAChE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;qBACrB;oBACD,IAAI,EAAE,IAAI,EAAE,CAAC,WAAW,IAAI,QAAQ,IAAI,EAAE,CAAC,WAAW,IAAI,QAAQ,EAAE;wBAChE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;qBACrB;oBACD,KAAK,GAAG,KAAK,CAAC;iBACjB;aACJ;SACJ;QAED,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;YAC/C,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;YAC/B,MAAM,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;YAC5B,IAAI,CAAC,CAAC,EAAE;gBACJ,OAAO,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YACD,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACzC,MAAM,CAAC,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;YAC/B,IAAI,CAAC,CAAC,EAAE;gBACJ,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;YACD,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACjB,CAAC;IACJ;;;;;OAKG;IACQ,aAAa,CAAC,EAAO,EAAE,EAAO,EAAE,OAAgB,EAAE,QAAiB;QACvE,IAAI,QAAQ,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC;SACf;QACD,MAAM,EAAE,GAAG,EAAE,CAAC;QACd,MAAM,EAAE,GAAG,EAAE,CAAC;QACd,IAAI,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,IAAG,EAAE,GAAG,EAAE,EAAE;YAClC,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,GAAG,EAAE,EAAE;YACT,OAAO,KAAK,CAAC;SAChB;QACD,kBAAkB;QAClB,OAAO,OAAO,CAAC;IACnB,CAAC;IAEJ;;;;;;OAMG;IACQ,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK;QACxC;;;WAGG;QACG,MAAM,WAAW,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC;QAClD,IAAI,WAAW,EAAE;YACb,IAAI,EAAE,EAAE;gBACJ,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;SAChB;QACD,qDAAqD;QACrD,IAAI,EAAE,EAAE;YACJ,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEJ;;;;;;OAMG;IACQ,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,MAAe;QAC5C,IAAI,EAAE,EAAE;YACJ,IAAI,EAAE,EAAE;gBACJ,OAAO,KAAK,CAAC;aAChB;YACD,OAAO,IAAI,CAAC;SACf;QACD,IAAI,EAAE,EAAE;YACJ,OAAO,IAAI,CAAC;SACf;QACD,4BAA4B;QAC5B,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACI,mBAAmB,CAAC,SAAiB;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,EAAE,CAAC;SACb;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI,CAAC,GAAG,EAAE;YACN,OAAO,EAAE,CAAC;SACb;QACD,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,EAAE;gBAClB,OAAO,GAAG,CAAC,IAAI,CAAC;aACnB;SACJ;QACD,OAAO,EAAE,CAAC;IACd,CAAC;CACJ;AACD;;GAEG;AACI,MAAM,WAAW;IAEpB,YAA4B,IAAU,EAAU,WAAyB,EAAkB,UAAmB;QAAlF,SAAI,GAAJ,IAAI,CAAM;QAAU,gBAAW,GAAX,WAAW,CAAc;QAAkB,eAAU,GAAV,UAAU,CAAS;QADvG,cAAS,GAAgC,EAAE,CAAC;IAEnD,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,IAAU;QACb,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YACd,IAAI,EAAwB,CAAC;YAC7B,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,EAAE,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;aAClD;iBAAM;gBACH,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC;aAClD;YACD,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,UAAU;QACN,MAAM,IAAI,GAAS,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,YAAY;QACR,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YACxB,MAAM,EAAE,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;YAC7B,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,SAAS;QACL,IAAI,EAAwB,CAAC;QAC7B,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,EAAE,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;SAClD;aAAM;YACH,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;SACnD;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxB,OAAO,EAAE,CAAC;IACd,CAAC;IACD;;QAEI;IACJ,SAAS,CAAC,GAAW;QACjB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;CAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;ACh6B2E;AAGhC;AAEV;AAEH;AAEkB;AACd;;;;;;AAInC;;;GAGG;AACI,MAAM,YAAY;IACxB,YAAoB,IAAgB,EAAU,MAAoB,EAAU,GAAkB,EAAS,EAAiB;QAApG,SAAI,GAAJ,IAAI,CAAY;QAAU,WAAM,GAAN,MAAM,CAAc;QAAU,QAAG,GAAH,GAAG,CAAe;QAAS,OAAE,GAAF,EAAE,CAAe;IACxH,CAAC;IAED;;;;;;;;;;OAUG;IACI,KAAK,CAAC,WAAmB,EAC/B,UAAuG,EAAE,EACzG,WAAoB,IAAI;QAExB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAClC,IAAI,QAAQ,IAAI,CAAC,KAAK,EAAE;YACvB,wDAAwD;YACxD,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;SAC5F;QACD,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;QACtC,OAAO,CAAC,oEAA0B,CAAC,GAAG,WAAW,CAAC;QAClD,IAAI,QAAQ,EAAE;YACb,OAAO,CAAC,iEAAuB,CAAC,GAAG,KAAK,CAAC;SACzC;QACD,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;QAChC,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,IAAI,IAAI,IAAI,OAAO,CAAC,aAAa,EAAE;YAClC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC7B;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAiB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;QAC7H,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;gBACb,MAAM,GAAG,GAAG,6BAA6B,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC9I,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;aACtD;YACD,wBAAwB;YACxB,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;gBACnC,OAAO,EAAE,CAAC;aACV;YAED,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;YACnD,IAAI,KAAK,EAAE;gBACV,IAAG,KAAK,EAAC;oBACR,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;iBACzB;gBACD,IAAG,QAAQ,EAAC;oBACX,IAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,EAAC;wBAC7B,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;wBACnC,MAAM,QAAQ,CAAC;qBACf;iBACD;gBACD,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,QAAQ,EAAE;gBACb,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAc,CAAC,CAAC;gBAC9C,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC;gBACzD,MAAM,QAAQ,CAAC;aACf;YACD,MAAM,GAAG,GAAG,+EAA+E,CAAC;YAC5F,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACJ,CAAC;IACE;;;OAGG;IACI,MAAM,CAAC,IAAS,EAAE,OAAsB;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,+DAAqB,CAAC,CAAC;QAC/D,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,uDAAqB,CAAC,+DAAqB,GAAG,4BAA4B,CAAC,CAAC;SACtF;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,OAAO,GAAG,CAAC,IAAI,CACX,mDAAG,CAAC,EAAE,CAAC,EAAE;YACL,OAAO,EAAE,CAAC,IAAY,CAAC;QAC3B,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,EAAE;YAC1B,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC;YACnB,MAAM,IAAI,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IACJ;;;;OAIG;IACK,WAAW,CAAC,MAAW;QAC9B;;;;;;;WAOG;QACH,MAAM,GAAG,GAAG,gEAAgE,CAAC;QAC7E,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,wDAAwD,CAAC;QAC3E,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;QAClB,OAAO,IAAI,4CAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,QAAQ,CAAC;YACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,QAAQ,CAAC,IAAS;QACzB,IAAI,MAAM,GAAG,IAAI,4DAAU,EAAE,CAAC;QAC9B,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;YACrB,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;gBAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC1B,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC9B;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IACD;;;;OAIG;IACI,QAAQ,CAAC,IAAS,EAAE,QAAgB;QAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC7C,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACzB,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;QACb,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpB,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACtB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,KAAK,EAAE,CAAC;QACV,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;;wEA7IW,YAAY;8GAAZ,YAAY,WAAZ,YAAY,mBALC,MAAM;;;;;;;;;;;;;;;;;;;ACZuB;AACX;AAED;AAGpC,MAAM,YAAa,SAAQ,4CAAI;IA0CrC;QACC,KAAK,EAAE,CAAC;QAzCT,eAAU,GAAS;YAClB,IAAI,EAAC,YAAY;YAChB,WAAW,EAAE,QAAQ;YACrB,KAAK,EAAE,YAAY;YACnB,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,mBAAmB;YAC5B,QAAQ,EAAE,CAAC,CAAC;YACZ,QAAQ,EAAE,aAAa;SACxB,CAAC;QACF,SAAI,GAAS;YACZ,IAAI,EAAC,MAAM;YACV,WAAW,EAAE,OAAO;YACpB,KAAK,EAAE,eAAe;YACtB,UAAU,EAAE,IAAI;YAChB,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,aAAa;YACtB,SAAS,EAAE,GAAG;SACf,CAAC;QACF,UAAK,GAAS;YACb,IAAI,EAAC,OAAO;YACX,WAAW,EAAE,OAAO;YACpB,KAAK,EAAE,oBAAoB;YAC3B,UAAU,EAAE,IAAI;YAChB,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,cAAc;YACvB,SAAS,EAAE,IAAI;SAChB,CAAC;QACF,iBAAY,GAAS;YACpB,IAAI,EAAC,cAAc;YAClB,WAAW,EAAE,UAAU;YACvB,KAAK,EAAE,gBAAgB;YACvB,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,aAAa;YACtB,SAAS,EAAE,IAAI;SAChB,CAAC;QAQD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,0DAAc,CAAC,CAAC,CAAC,CAAC,EAAE,0DAAc,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,+DAAmB,EAAE,gEAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,+DAAmB,EAAE,4DAAgB,EAAE,gEAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,gEAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,CAAC,YAAY,CAAC,CAAC;IACjC,CAAC;IAnBM,MAAM,CAAC,WAAW;QACxB,OAAO,YAAY,CAAC,SAAS,CAAC;IAC/B,CAAC;IAmBM,OAAO;QACZ,OAAO,UAAU,CAAC;IACpB,CAAC;;AA5Dc,sBAAS,GAAG,IAAI,YAAY,EAAE,CAAC;AAgExC,MAAM,UAAW,SAAQ,oDAAQ;IACvC,YAAY,IAAkB,EAAE,EAAgB;QAC/C,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAsD,EAAE,KAAuC;QAC5G,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,aAAa,CAAC,IAAsD;QACnE,OAAO,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;CACD;;;;;;;;;;;;;;;;;;;;;;;;ACnFyD;AACX;AACwB;AACf;AACI;AACE;AACU;AACY;;AAGpF;;;GAGG;AAoDI,MAAM,UAAU;IACrB,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE;gBACT,kEAAa;gBACb,oEAAc;aACf;SACF,CAAC;IACJ,CAAC;;oEATU,UAAU;uGAAV,UAAU;4GA3BR,EAAE,YALJ;YACL,yDAAY;YACZ,gFAAc;YACd,kEAAgB;SACnB;QAIG;;WAEG;QACH,yDAAY;QACZ,gFAAc;QACd,kEAAgB;mIAmBX,UAAU;QAhDf;;WAEG;QACH;;UAEE;QACF,uEAAmB;QACnB,iFAAgB;QAChB;;WAEG;QACH,6FAAgB,aAMhB,yDAAY;QACZ,gFAAc;QACd,kEAAgB;QAKhB;;WAEG;QACH,yDAAY;QACZ,gFAAc;QACd,kEAAgB;QAChB;;WAEG;QACH;;UAEE;QACF,uEAAmB;QACnB,iFAAgB;QAChB;;WAEG;QACH,6FAAgB;;;;;;;;;;;;;;;;;AC3D8F;AAE1D;;;AAE5D;;GAEG;AACH,MAAM,MAAM,GAAwC;IAChD,OAAO,EAAE,qEAAgB;CAC5B,CAAC;AASK,MAAM,mBAAmB;IAa9B,YAAoB,wBAAkD;QAAlD,6BAAwB,GAAxB,wBAAwB,CAA0B;QATtE,aAAQ,GAAW,KAAK,CAAC;QAKzB,YAAO,GAAe,EAAE,CAAC;QACzB,kBAAa,GAAW,CAAC,CAAC;IAGiD,CAAC;IAE5E,QAAQ;QACN;;;WAGG;QACH,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,SAAiB,EAAC,IAAU;QAE1C,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5F,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAClD,CAAC,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;QAC9B,CAAC,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;IACtC,CAAC;IAED,UAAU,CAAC,QAAQ;QAEjB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACxB,CAAC;;sFA3CQ,mBAAmB;iHAAnB,mBAAmB;0EAQoB,2DAAgB;;;;;QC1BpE,4EAA+C;;;;;;;;;;;;;;;;;;ACAgE;AAGpD;;;AAG3D;;GAEG;AACH,MAAM,IAAI,GAAgE;IACtE,KAAK,EAAE,EAAC,IAAI,EAAC,oEAAgB,EAAE;CAElC,CAAC;AAQK,MAAM,gBAAgB;IAY3B,YAAoB,wBAAkD;QAAlD,6BAAwB,GAAxB,wBAAwB,CAA0B;QARtE,YAAO,GAAW,KAAK,CAAC;IAQiD,CAAC;IAE1E,QAAQ;QACN,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;QAC3B;;WAEG;QACH,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IAEI,QAAQ,CAAC,QAAgB,EAAE,IAAS;QACzC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CACnE,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CACpB,CAAC;QACF,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAClD,CAAC,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;QAC9B,CAAC,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;IACtC,CAAC;;gFArCU,gBAAgB;8GAAhB,gBAAgB;0EAWyB,2DAAgB;;;;;QC/BtE,4EAAiD;;;;;;;;;;;;;;;;;;;;;ACE2B;AAGmB;;;;AAQxF,MAAM,gBAAgB;IAO3B,YAA0B,EAAgB;QAAhB,OAAE,GAAF,EAAE,CAAc;QACxC,IAAI,CAAC,IAAI,GAAG,yGAAwB,EAAE,CAAC;QACvC,IAAI,CAAC,EAAE,GAAG,IAAI,sFAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC;;gFAVU,gBAAgB;8GAAhB,gBAAgB;QCb7B,uFAA2D;;QAAnC,sEAAS;;;;;;;;;;;;;;;;;;ACI1B,MAAM,gBAAgB;;AACb,kCAAiB,GAAG,aAAc;AAClC,8BAAa,GAAG,SAAU;gFAF7B,gBAAgB;iHAAhB,gBAAgB,WAAhB,gBAAgB;;;;;;;;;;;;;;;;;ACHgD;;;AAEtE,MAAM,cAAc;IACxB,YAAoB,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;IAAG,CAAC;IAE7C,WAAW,CAAC,OAAe;QAC1B,MAAM,MAAM,GAAG,IAAI,0EAAiB,EAAE,CAAC;QACvC,MAAM,CAAC,UAAU,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACzC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IACC,SAAS,CAAC,OAAe;QACtB,MAAM,MAAM,GAAG,IAAI,0EAAiB,EAAE,CAAC;QACvC,MAAM,CAAC,UAAU,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACvC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,QAAQ,CAAC,OAAe;QACrB,MAAM,MAAM,GAAG,IAAI,0EAAiB,EAAE,CAAC;QACvC,MAAM,CAAC,UAAU,GAAG,CAAC,eAAe,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IACD,UAAU,CAAC,OAAe;QACvB,MAAM,MAAM,GAAG,IAAI,0EAAiB,EAAE,CAAC;QACvC,MAAM,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAClC,MAAM,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,EAAC,MAAM,CAAC;IAC1C,CAAC;IACD,KAAK;QACF,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;;4EA9BS,cAAc;+GAAd,cAAc,WAAd,cAAc;;;;;;;;;;;;;;;;;;;ACDY;AACe;;;AAM/C,MAAM,aAAa;IAExB,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAD1B,iBAAY,GAAG,IAAI,iDAAe,CAAS,EAAE,CAAC,CAAC;QAKvD,oFAAoF;QAEpF,mBAAc,GAAG;YACf,IAAI,CAAC,YAAY,CAAC,iFAAkC,CAAC,CAAC;QACxD,CAAC;QACM,wBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QAR5D,IAAI,CAAC,MAAM,CAAC,QAAQ;IACtB,CAAC;;0EAJU,aAAa;8GAAb,aAAa,WAAb,aAAa;AAYzB,CAAC;;;;;;;;;;;;;;;ACrBF,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,IAAI;CACjB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;ACdvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app.router.ts","./src/app/framework-modules/elements/elements.ts","./src/app/framework-modules/elements/mv-field-generator/component.ts","./src/app/framework-modules/elements/mv-field-generator/component.html","./src/app/framework-modules/elements/mv-textarea/component.ts","./src/app/framework-modules/elements/mv-textarea/component.html","./src/app/framework-modules/elements/mv-textbox/component.ts","./src/app/framework-modules/elements/mv-textbox/component.html","./src/app/framework-modules/formdata/form/clientConfig.ts","./src/app/framework-modules/formdata/form/clientContext.ts","./src/app/framework-modules/formdata/form/conventions.ts","./src/app/framework-modules/formdata/form/form.ts","./src/app/framework-modules/formdata/form/formData.ts","./src/app/framework-modules/formdata/form/serviceAgent.ts","./src/app/framework-modules/formdata/gen/customerForm.ts","./src/app/modules/base.module.ts","./src/app/modules/non-session/component.ts","./src/app/modules/non-session/component.html","./src/app/modules/non-session/landing-page/component.ts","./src/app/modules/non-session/landing-page/component.html","./src/app/modules/non-session/landing-page/sample-page/component.ts","./src/app/modules/non-session/landing-page/sample-page/component.html","./src/app/services/constantsService.ts","./src/app/services/messageService.ts","./src/app/services/routerService.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component, AfterViewInit } from '@angular/core';\nimport { RouterService } from './services/routerService';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [RouterService]\n})\nexport class AppComponent implements AfterViewInit {\n  constructor(private routerService: RouterService) {\n  }\n  ngAfterViewInit() {\n    this.routerService.openNonSession();\n  }\n}\n","<router-outlet ></router-outlet>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { BaseModule } from './modules/base.module';\nimport { AppRouting } from './app.router';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRouting,\n    NgxChartsModule,\n    BaseModule.forRoot(),\n    NgbModule,\n    BrowserAnimationsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { ConstantsService } from './services/constantsService';\n\nconst appRoutes: Routes = [\n  {\n    path: '',\n    component: AppComponent\n  },\n  {\n    path: ConstantsService.ROUTE_NON_SESSION, loadChildren: () => import('./modules/non-session/module').then(m => m.NonSessionModule)\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(appRoutes)],\n  exports: [RouterModule]\n})\nexport class AppRouting { }\n","import {\n    NgModule\n} from '@angular/core';\nimport {\n    ReactiveFormsModule,\n    FormsModule\n} from '@angular/forms';\nimport {\n    CommonModule\n} from '@angular/common';\n\nimport {\n    MatButtonModule\n} from '@angular/material/button';\nimport {\n    MatButtonToggleModule\n} from '@angular/material/button-toggle';\nimport {\n    MatCardModule\n} from '@angular/material/card';\nimport {\n    MatCheckboxModule\n} from '@angular/material/checkbox';\nimport {\n    MatChipsModule\n} from '@angular/material/chips';\nimport {\n    MatNativeDateModule\n} from '@angular/material/core';\nimport {\n    MatDatepickerModule\n} from '@angular/material/datepicker';\nimport {\n    MatDialogModule\n} from '@angular/material/dialog';\nimport {\n    /**\n     * Material Imports\n     */\n    MatFormFieldModule\n} from '@angular/material/form-field';\nimport {\n    MatGridListModule\n} from '@angular/material/grid-list';\nimport {\n    MatIconModule\n} from '@angular/material/icon';\nimport {\n    MatInputModule\n} from '@angular/material/input';\nimport {\n    MatPaginatorModule\n} from '@angular/material/paginator';\nimport {\n    MatProgressSpinnerModule\n} from '@angular/material/progress-spinner';\nimport {\n    MatSelectModule\n} from '@angular/material/select';\nimport {\n    MatSidenavModule\n} from '@angular/material/sidenav';\nimport {\n    MatSnackBarModule\n} from '@angular/material/snack-bar';\nimport {\n    MatSortModule\n} from '@angular/material/sort';\nimport {\n    MatTableModule\n} from '@angular/material/table';\nimport {\n    MatTooltipModule\n} from '@angular/material/tooltip';\nimport {\n    MvTextareaComponent\n} from './mv-textarea/component';\nimport {\n    MvFieldGeneratorComponent\n} from './mv-field-generator/component';\nimport {\n    MvTextboxComponent\n} from './mv-textbox/component';\n\n@NgModule({\n    declarations: [\n        /**\n         * Material Component Declarations\n         */\n        /**\n         * Metadev Client Compoenent Declarations\n         */\n        MvTextareaComponent,\n        MvTextboxComponent,\n        MvFieldGeneratorComponent\n    ],\n    imports: [\n        /**\n         * Material Component Imports\n         */\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatButtonModule,\n        MatChipsModule,\n        MatSortModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatCheckboxModule,\n        MatTooltipModule,\n        MatCardModule,\n        MatSelectModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatSnackBarModule,\n        MatButtonToggleModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatGridListModule,\n        /**\n         * metadev Compoenent  Imports\n         */\n        /**\n         * Miscellaneous Imports\n         */\n        ReactiveFormsModule,\n        CommonModule,\n        FormsModule,\n    ],\n    bootstrap: [],\n    exports: [\n        /**\n         * Material Component Exports\n         */\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatButtonModule,\n        MatChipsModule,\n        MatSortModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatCheckboxModule,\n        MatTooltipModule,\n        MatCardModule,\n        MatSelectModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatSnackBarModule,\n        MatButtonToggleModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatGridListModule,\n        /**\n         * Metadev client Compoenents Exports\n         */\n        MvTextareaComponent,\n        MvTextboxComponent,\n        MvFieldGeneratorComponent,\n        /**\n         * Miscellaneous Exports\n         */\n        ReactiveFormsModule,\n        CommonModule,\n        FormsModule,\n\n    ]\n})\n\nexport class ElementsModule {\n    constructor() { \n        /* TODO document why this constructor is empty */ \n    }\n}","import {\r\n\tComponent,\r\n\tInput,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport {\r\n\tForm\r\n} from '../../formdata/form/form';\r\nimport {\r\n\tFormData\r\n} from '../../formdata/form/formData';\r\n\r\n@Component({\r\n\tselector: 'app-mv-field-generator',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: []\r\n})\r\n\r\n/**\r\n * Automated field Generator component\r\n * @fd - Formdata\r\n */\r\nexport class MvFieldGeneratorComponent implements OnInit {\r\n\t@Input() public fd: FormData;\r\n\r\n\tfields: any;\r\n\tform: Form;\r\n\tcontrol: FormControl;\r\n\r\n\tngOnInit() {\r\n\t\tthis.form = this.fd.form;\r\n\t\tthis.fields = this.fd.form.fields;\r\n\t}\r\n}","<mat-card class=\"col-6\" style=\"padding: auto; margin:auto\">\r\n\t<h5>\r\n\t\tCustomer Form\r\n\t</h5>\r\n\t<div *ngFor=\"let field of fields | keyvalue\" [ngSwitch]=\"field.value.controlType\">\r\n\t\t<app-mv-textbox *ngSwitchCase=\"'Input'\" [field]=\"form[field.key]\" [fd]=\"fd\"></app-mv-textbox>\r\n\t\t<app-mv-textarea *ngSwitchCase=\"'Textarea'\" [field]=\"form[field.key]\" [fd]=\"fd\"></app-mv-textarea>\r\n\t</div>\r\n</mat-card>","import {\r\n\tComponent,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport {\r\n\tField\r\n} from '../../formdata/form/form';\r\nimport {\r\n\tFormData\r\n} from '../../formdata/form/formData';\r\n\r\n@Component({\r\n\tselector: 'app-mv-textarea',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: []\r\n})\r\n\r\n/*\r\n * Wrapper class for angular material.\r\n * Unpacks values from the model to render a textarea\r\n * @ouput - valueChange - value change emitter.\r\n */\r\nexport class MvTextareaComponent implements OnInit {\r\n\t@Input() public field: Field;\r\n\t@Input() public fd: FormData;\r\n\t@Output() public valueChange = new EventEmitter < any > ();\r\n\r\n\tcontrol: FormControl;\r\n\r\n\tngOnInit() {\r\n\t\tthis.control = this.fd.formGroup.get(this.field.name) as FormControl;\r\n\t}\r\n\tvalueChangeDetector($event) {\r\n\t\tthis.valueChange.next(this.fd.getFieldValue(this.field.name));\r\n\t}\r\n}","<mat-form-field class=\"col\" appearance=\"fill\">\r\n\t<mat-label>{{field.label}} <span *ngIf=\"!field.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n\t<span matPrefix>{{field.prefix}}</span>\r\n\t<textarea [formControl]=\"control\" matInput (input)=\"valueChangeDetector($event)\"\r\n\t\t[required]=\"field.isRequired\" [readonly]=\"field.isEditable\" placeholder=\"{{field.placeHolder}}\"> </textarea>\r\n\t<mat-hint>{{field.hint}}</mat-hint>\r\n\t<mat-icon matSuffix>{{field.icon}}</mat-icon>\r\n\t<mat-error>\r\n\t\t<div *ngIf=\"this.control.errors\">\r\n\t\t\t{{this.field.errorId}}\r\n\t\t</div>\r\n\t</mat-error>\r\n</mat-form-field>","import {\r\n\tComponent,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnInit\r\n} from '@angular/core';\r\nimport {\r\n\tFormControl\r\n} from '@angular/forms';\r\nimport {\r\n\tField\r\n} from '../../formdata/form/form';\r\nimport {\r\n\tFormData\r\n} from '../../formdata/form/formData';\r\n\r\n@Component({\r\n\tselector: 'app-mv-textbox',\r\n\ttemplateUrl: './component.html',\r\n\tstyleUrls: ['./component.scss']\r\n})\r\n\r\nexport class MvTextboxComponent implements OnInit {\r\n\t@Input() public field: Field;\r\n\t@Input() public fd: FormData;\r\n\t@Input() public type: string;\r\n\t@Output() public valueChange = new EventEmitter < any > ();\r\n\r\n\r\n\tcontrol: FormControl;\r\n\r\n\tngOnInit() {\r\n\t\tthis.control = this.fd.formGroup.get(this.field.name) as FormControl;\r\n\t}\r\n\tvalueChangeDetector($event) {\r\n\t\tthis.valueChange.next(this.fd.getFieldValue(this.field.name));\r\n\t}\r\n}","<mat-form-field class=\"col\" appearance=\"fill\">\r\n\t<mat-label>{{field.label}} <span *ngIf=\"!field.isRequired\" class=\"optional\">(optional)</span></mat-label>\r\n\t<span matPrefix>{{field.prefix}}</span>\r\n\t<input [type]=\"type\" [formControl]=\"control\" matInput (input)=\"valueChangeDetector($event)\"\r\n\t\t[required]=\"field.isRequired\" [readonly]=\"field.isEditable\" placeholder=\"{{field.placeHolder}}\">\r\n\t<mat-hint>{{field.hint}}</mat-hint>\r\n\t<mat-icon matSuffix>{{field.icon}}</mat-icon>\r\n\t<mat-error>\r\n\t\t<div *ngIf=\"this.control.errors\">\r\n\t\t\t{{this.field.errorId}}\r\n\t\t</div>\r\n\t</mat-error>\r\n</mat-form-field>","import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: \"root\" })\nexport class ClientConfig {\n    url = 'http://localhost:8080/a';\n}","/**\n * acts as a cache from session storage. designed keeping in mind that\n * most session-scoped data is stored-once-accessed-often\n */\nimport {\n  Injectable\n} from \"@angular/core\";\nimport {\n  UserContextVo\n} from '../gen/userContextForm';\nimport {\n  RouterService\n} from 'src/app/services/routerService';\nconst USER = \"_user\";\nconst TOKEN = \"_token\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ClientContext {\n  constructor(private rs: RouterService) {}\n  private values = new Map < String, any > ();\n  private validPages = {};\n  private validPagesArray = [];\n\n  public setToken(token: string) {\n    this.setValue(TOKEN, token);\n  }\n\n  /**\n   *\n   * @param data vo returned by the server on a successful login\n   */\n  public login(user: UserContextVo) {\n    this.setValue(USER, user);\n    this.validPagesArray = [];\n  }\n  /**\n   *\n   * @param data vo returned by the server on a successful login\n   */\n  public logout() {\n    this.setValue(TOKEN, null);\n    this.setValue(USER, null);\n    this.rs.openNonSession();\n  }\n  /**\n   * any data that  is to be saved as part of session.\n   * This will survive page reloads, but not browser closure\n   *\n   * @param key\n   * @param value\n   */\n  public setValue(key: string, value: any): void {\n    this.values.set(key, value);\n    if (value == null) {\n      sessionStorage.removeItem(key);\n    } else {\n      sessionStorage.setItem(key, JSON.stringify(value));\n    }\n  }\n\n  /**\n   * value of a field that is session scoped\n   * @param key\n   */\n  public getValue(key: string): any {\n    let value = this.values.get(key);\n    if (value) {\n      return value;\n    }\n    const s = sessionStorage.getItem(key);\n    if (!s) {\n      return s;\n    }\n    value = s;\n    this.values.set(key, value);\n    return value;\n  }\n\n  /**\n   * details of logged-in user.\n   */\n  public getToken(): string {\n    return this.getValue(TOKEN) as string;\n  }\n\n  /**\n   * details of logged-in user.\n   */\n  public getUser(): UserContextVo {\n    return this.getValue(USER) as UserContextVo;\n  }\n\n  /**\n   * Returns the array of permitted screens for a user.\n   */\n  public getPermittedScreens(): Array < string > {\n    return this.validPagesArray;\n  }\n\n  /**\n   * is the logged in user allowed to use this page?\n   * @param pageId \n   */\n  public isPageValid(pageId: string): boolean {\n    return this.validPages[pageId];\n  }\n}","/**\r\n * constants/conventions that are used across layers.\r\n * These are fixed at design time. deployment-time parameters can be found in Config\r\n */\r\nexport class Conventions {\r\n    /**\r\n     * HTTP headers\r\n     */\r\n\tstatic HEADER_SERVICE = '_s';\r\n\tstatic HEADER_AUTH = 'Authorization';\r\n\t\r\n    /**\r\n     * tags or field names in the paylaod back-and-forth\r\n     */\r\n    static TAG_MESSAGES = 'messages';\r\n\tstatic TAG_ALL_OK = 'allOk';\r\n\tstatic TAG_DATA = 'data';\r\n\tstatic TAG_LIST = 'list';\r\n\tstatic TAG_MAX_ROWS = 'maxRows';\r\n\tstatic TAG_CONDITIONS = 'conditions';\r\n\tstatic TAG_FILTER_COMP = 'comp';\r\n\tstatic TAG_FILTER_VALUE = 'value';\r\n    static TAG_FILTER_VALUE_TO = 'toValue';\r\n    \r\n     /**\r\n     * special pre-defined service to get drop-down values\r\n     */\r\n    public static SERVICE_LIST = 'list';\r\n    /*\r\n\t * form I/O service prefixes\r\n\t */\r\n    static OP_FETCH = 'get';\r\n    static OP_NEW = 'create';\r\n    static OP_UPDATE = 'update';\r\n    static OP_DELETE = 'delete';\r\n    static OP_FILTER = 'filter';\r\n    static OP_BULK = 'bulk';\r\n\r\n\t/*\r\n\t * filter operators\r\n\t */\r\n    static FILTER_EQ = '=';\r\n    static FILTER_NE = '!=';\r\n    static FILTER_LE = '<=';\r\n    static FILTER_LT = '<';\r\n    static FILTER_GE = '>=';\r\n    static FILTER_GT = '>';\r\n    static FILTER_BETWEEN = '><';\r\n    static FILTER_STARTS_WITH = '^';\r\n    static FILTER_CONTAINS = '~';\r\n    \r\n    /*\r\n     * value types of fields \r\n     */\r\n    static TYPE_TEXT = 0;\r\n\tstatic TYPE_INTEGER = 1;\r\n\tstatic TYPE_DECIMAL = 2;\r\n\tstatic TYPE_BOOLEAN = 3;\r\n\tstatic TYPE_DATE = 4;\r\n\tstatic TYPE_TIMESTAMP = 5;\r\n}\r\n","import { ServiceAgent } from './serviceAgent';\r\nimport { FormData, PanelData } from './formData';\r\nimport { ValidatorFn } from '@angular/forms';\r\nimport { SelectOption } from './types';\r\n\r\n/**\r\n * represents the data model, both structure and run-time data\r\n */\r\nexport abstract class Form {\r\n\t/**\r\n\t * key-Field pairs. has all the fields of this form\r\n\t */\r\n\tpublic fields: Map<string, Field>;\r\n\t/**\r\n\t * key-Table pairs. has all the tables (sub-forms) in this form\r\n\t */\r\n\tpublic childForms: Map<string, ChildForm>;\r\n\r\n\t/**\r\n\t * meta-data for all controls that can be used to create a formGroup using formBuilder.group()\r\n\t */\r\n\tpublic controls: Map<string, ValidatorFn[]>;\r\n\r\n\t/**\r\n\t * inter-field validations\r\n\t */\r\n\tpublic validations: Array<{ [key: string]: any }>;\r\n\r\n\t/**\r\n\t * field names that have enumeratedlist of values. That is,fields that are to be rendered as drop-downs\r\n\t */\r\n\tpublic listFields: string[];\r\n\r\n\t/**\r\n\t * fields that make up the primary key. generally onl one, but possible to have more than one\r\n\t */\r\n\tpublic keyFields: string[];\r\n\r\n\t/**\r\n\t * what operations are allowed on this form.\r\n\t */\r\n\tpublic opsAllowed: { [key: string]: boolean };\r\n\r\n\t/**\r\n\t * for operations are offered to guests/unauthenticated/non-logged-in users?\r\n\t */\r\n\tpublic serveGuests = false;\r\n\r\n\r\n\tpublic constructor() {\r\n   // TODO document why this constructor is empty\r\n\t}\r\n\t/**\r\n\t * name of this form. \r\n\t */\r\n\tpublic abstract getName(): string;\r\n\r\n\t/**\r\n\t * create a model (data-holder) for this form\r\n\t * @param serverAgent is injectable \r\n\t */\r\n\tpublic newFormData(serverAgent: ServiceAgent): FormData {\r\n\t\treturn new FormData(this, serverAgent);\r\n\t}\r\n\r\n\t/**\r\n\t * create a model (data-holder) for this form\r\n\t * @param serverAgent is injectable \r\n\t */\r\n\tpublic newPanelData(serverAgent: ServiceAgent): PanelData {\r\n\t\treturn new PanelData(this, serverAgent);\r\n\t}\r\n\t/**\r\n\t * \r\n\t * @param operation \r\n\t * @returns service name of the form \"operation-formName\", say filter-costomer\r\n\t */\r\n\tpublic getServiceName(operation: string): string {\r\n\t\tif (this.opAllowed(operation)) {\r\n\t\t\treturn operation + '_' + this.getName();\r\n\t\t}\r\n\t\tconsole.error('Operation ' + operation + ' not allowed on form ' + this.getName());\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param operation \r\n\t * @returns true of this operation is designed for this form\r\n\t */\r\n\tpublic opAllowed(operation: string): boolean {\r\n\t\tif (this.opsAllowed && this.opsAllowed[operation]) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tconsole.error('Form ', this.getName(), ' is not designed for ', operation, ' operation');\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport interface ChildForm {\r\n\tname: string;\r\n\tform: Form;\r\n\tisTabular: boolean;\r\n\r\n\tlabel?: string;\r\n\tminRows?: number;\r\n\tmaxRows?: number;\r\n\terrorId?: string;\r\n\tisEditable?: boolean;\r\n}\r\n\r\nexport interface Field {\r\n\t/** \r\n\t * required attributes\r\n\t */\r\n\tname: string;\r\n\tlabel: string;\r\n\t/**\r\n\t * 0-text, 1-integer, 2-decimal, 3-boolean, 4-date, 5-timestamp\r\n\t */\r\n\tvalueType: 0 | 1 | 2 | 3 | 4 | 5;\r\n\r\n\t/**\r\n\t * optional attributes\r\n\t */\r\n\tdefaultValue?: string | number | boolean;\r\n\taltLabel?: string;\r\n\tplaceHolder?: string;\r\n\ttrueLabel?: string;\r\n\tfalseLabel?: string;\r\n\tisEditable?: boolean;\r\n\terrorId?: string;\r\n\tisRequired?: boolean;\r\n\tminLength?: number;\r\n\tmaxLength?: number;\r\n\tregex?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n\tnbrFractions?: number;\r\n\tnbrDecimals?: number;\r\n\tlistName?: string;\r\n\tlistKey?: string;\r\n\tvalueList?: SelectOption[];\r\n\tkeyedList?: { [key: string]: SelectOption[] };\r\n\tcontrolType?: \"Hidden\" | \"Input\" | \"Dropdown\" | \"Output\" | \"Checkbox\" | \"Password\" | \"Textarea\";\r\n\tdisabled?: boolean;\r\n\thint?: string;\r\n\tmultipleSelect?: boolean;\r\n\ticon?: string;\r\n\tsuffix?: string;\r\n\tprefix?: string;\r\n\r\n}\r\n\r\n","import { FormControl, ValidatorFn, FormGroup } from '@angular/forms';\r\nimport { SelectOption, Vo, FieldValues, Message, FilterRequest } from './types';\r\nimport { Form, Field, ChildForm } from './form';\r\nimport { ServiceAgent } from './serviceAgent';\r\nimport { Conventions } from './conventions';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport 'rxjs/add/observable/throw';\r\n\r\n\r\n\r\nexport class PanelData {\r\n    /**\r\n    * data as received from the server\r\n    */\r\n    data: Vo = {};\r\n\t/**\r\n\t * data for child forms that ane non-tabular\r\n \t */\r\n    childData: Map<string, PanelData | FormData> = new Map();\r\n    /** \r\n    * data for child forms that are tabukar\r\n    */\r\n    childTabularData: Map<string, TabularData> = new Map();\r\n    /**\r\n     * set to true when a service is requested from the server.\r\n     * this can be used by the view-component to indicate aciton \r\n     */\r\n    waitingForServerResponse: boolean = false;\r\n    /**\r\n       * errors returned by the server\r\n       */\r\n    errors: string[] = [];\r\n    /**\r\n     * warnings returned by the server\r\n     */\r\n    warnings: string[] = [];\r\n\r\n    /**\r\n     * informations messages received by the server\r\n     */\r\n    info: string[] = [];\r\n\r\n    /**\r\n     * form controls for fields/children. empty if this panel is not editable\r\n     */\r\n    formGroup: FormGroup;\r\n\r\n    protected hasFg = false;\r\n    constructor(public readonly form: Form, protected readonly serverAgent: ServiceAgent) {\r\n        this.formGroup = new FormGroup({});\r\n        if (!form.childForms) {\r\n            return;\r\n        }\r\n\r\n        form.childForms.forEach((child: ChildForm, key: string) => {\r\n            if (child.isTabular) {\r\n                this.childTabularData.set(key, new TabularData(child.form, serverAgent, child.isEditable));\r\n            } else {\r\n                if (child.isEditable) {\r\n                    this.childData.set(key, new FormData(child.form, serverAgent));\r\n                } else {\r\n                    this.childData.set(key, new PanelData(child.form, serverAgent));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get data as a Value Object. HAs values as received from the server.\r\n     * Any input field/control DOES not have the lates value entered by the user.\r\n     * getFieldValue() must be used to get the current value of an input field.\r\n     */\r\n    public getRawData(): Vo {\r\n        return this.data;\r\n    }\r\n\r\n    /**\r\n    * @override data is to be set to form group\r\n    * @param data as received from a service request\r\n    */\r\n    public setAll(data: Vo) {\r\n        if (!data) {\r\n            data = {};\r\n        }\r\n        this.data = data;\r\n        if (this.hasFg) {\r\n            this.formGroup.patchValue(data);\r\n        }\r\n\r\n        this.childData.forEach((fd, key) => {\r\n            fd.setAll(data[key] as Vo || {});\r\n        });\r\n\r\n        this.childTabularData.forEach((table, key) => {\r\n            table.setAll(data[key] as Vo[] || []);\r\n        });\r\n    }\r\n\r\n    /**\r\n\t * @returns object contianing all data from form controls. as well as all child forms.\r\n     * Note that this data will not contain fields from non-form panel\r\n\t */\r\n    public extractAll(): Vo {\r\n        const d = this.hasFg ? this.formGroup.value : this.data;\r\n        this.childData.forEach((fd, key) => {\r\n            d[key] = fd.extractAll();\r\n        });\r\n\r\n        this.childTabularData.forEach((table, key) => {\r\n            d[key] = table.extractAll();\r\n        });\r\n        return d;\r\n    }\r\n\r\n    /**\r\n\t * @returns object contianing all data from form controls, or raw data as recived, but no tany child-data.\r\n     * That is why the returned type id FieldValues and not Vo\r\n\t */\r\n    public extractAllFields(): FieldValues {\r\n        return this.hasFg ? this.formGroup.value : this.data;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name name of the field. Valid field names can be picked up from \r\n     * static definitions in the form \r\n     * @param value \r\n     */\r\n    public setFieldValue(name: string, value: string | number | boolean | null) {\r\n        const fc = this.formGroup.controls[name];\r\n        if (fc) {\r\n            fc.setValue(value);\r\n        }\r\n\r\n        this.data[name] = value;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param values name-value pairs to be se to this data \r\n     */\r\n    public setFieldValues(values: FieldValues): void {\r\n        Object.keys(values).forEach(key => {\r\n            this.setFieldValue(key, values[key]);\r\n        });\r\n    }\r\n    /**\r\n      * \r\n      * @param name name of the field. \r\n      * concrete classes over-ride this method to restict name values to their valid list\r\n      * @returns value of this field, or null/undefined if this is not a field\r\n      */\r\n    public getFieldValue(name: string): string | number | boolean {\r\n        const fc = this.formGroup.controls[name];\r\n        if (fc) {\r\n            return fc.value;\r\n        }\r\n\r\n        return this.data[name] as string | number | boolean;\r\n    }\r\n\r\n    /**\r\n     * @param names to be extracted\r\n     * @returns data-object with name-values. null if no value is found for a field \r\n     */\r\n    public getFieldValues(names: string[]): FieldValues {\r\n        let values = {};\r\n        names.forEach(key => {\r\n            values[key] = this.getFieldValue(key);\r\n        });\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name name of the child field. \r\n     * Valid child names are available as static members of the form\r\n     * @returns appropriate data for the child form. null/undefined if no such child\r\n     */\r\n    public getChildData(name: string): PanelData | FormData {\r\n        if (this.childData) {\r\n            return this.childData.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name name of the child field. \r\n     * Valid child names are available as static members of the form\r\n     * @returns appropriate data for the child form. null/undefined if no such child\r\n     */\r\n    public getChildTable(name: string): TabularData {\r\n        if (this.childTabularData) {\r\n            return this.childTabularData.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * extarct key fields only\r\n     */\r\n    public extractKeyFields(): FieldValues {\r\n        if (this.form.keyFields && this.form.keyFields.length) {\r\n            return this.extractFields(this.form.keyFields);\r\n        }\r\n        console.info('Form has no keys. Doing a get operation with all fields');\r\n        return this.extractAllFields();\r\n    }\r\n\r\n    public extractFields(fields: string[]): FieldValues {\r\n        if (!fields || !fields.length) {\r\n            return null;\r\n        }\r\n        const data: FieldValues = {};\r\n        fields.forEach(f => {\r\n            data[f] = this.getFieldValue(f);\r\n        });\r\n\r\n        return data;\r\n    }\r\n    /**\r\n     * reset the messages. typically called when user dismisses them, or before a server-request is made\r\n     */\r\n    public resetMessages() {\r\n        this.errors = [];\r\n        this.warnings = [];\r\n        this.info = [];\r\n    }\r\n\r\n    /**\r\n     * messages are set to this model, from where the \r\n     * html component can pick it up for rendering\r\n     * @param messages \r\n     */\r\n    public setMessages(messages: Message[]) {\r\n        this.resetMessages();\r\n        if (messages && messages.forEach) {\r\n            messages.forEach(msg => {\r\n                switch (msg.type) {\r\n                    case \"error\":\r\n                        this.errors.push(msg.text);\r\n                        break;\r\n                    case \"warning\":\r\n                        this.warnings.push(msg.text);\r\n                        break;\r\n                    default:\r\n                        this.info.push(msg.text);\r\n                        break;\r\n                }\r\n            });\r\n        } else {\r\n            console.error('Error messages received from server', messages);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * invoke a specific service with your own pay load, and receive data into this form data\r\n     * @param serviceName service name. \r\n     * @param data input expected by the service\r\n     */\r\n    public callService(serviceName: string, data: FieldValues) {\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data, asQueryParams: true }, !this.form.serveGuests).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                this.setAll(vo);\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n    /**\r\n    * get data for this entity based on primary or unique key\r\n    * caller has to enaure that either key fields, or unique fields have valid values in the model before making this call\r\n    */\r\n    public fetchData() {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_FETCH);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_FETCH + ' operation not allowed');\r\n        }\r\n\r\n        const data = this.extractKeyFields();\r\n        if (data == null) {\r\n            const msg = 'Key values not found. Fetch request abandoned';\r\n            console.error(msg);\r\n            return Observable.throwError(msg);\r\n        }\r\n\r\n        return this.callService(serviceName, data);\r\n    }\r\n\r\n    /**\r\n     * fetch data based the provided input. Use this insted of fetch() if the API \r\n     * requires some data that is not primary key\r\n     * @param data \r\n     */\r\n    public fetchFor(data: FieldValues) {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_FETCH);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_FETCH + ' operation not allowed');\r\n        }\r\n\r\n        return this.callService(serviceName, data);\r\n    }\r\n\r\n    /**\r\n     * get filtered rows from the server. \r\n     * The data received from the server is set to the child-model (PanelData/formData) before returning it to the caller\r\n     * @param child for which data is to be fecthed from the serber\r\n     * @param filters to be applied on the child to get data\r\n     */\r\n    public fetchChildren(child: string, filters: FilterRequest): Observable<Vo[]> {\r\n        const td = this.childTabularData.get(child);\r\n        if (!td) {\r\n            const msg = child + ' is not a tabular child of this panel. operation abandoned';\r\n            console.error(msg);\r\n            return Observable.throwError(msg);\r\n        }\r\n        const childForm = this.form.childForms.get(child).form;\r\n        const serviceName = childForm.getServiceName(Conventions.OP_FILTER);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_FILTER + ' operation not allowed.');\r\n        }\r\n\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: filters }).pipe(\r\n            map(vo => {\r\n                const data = vo.list as Vo[];\r\n                td.setAll(data);\r\n                this.waitingForServerResponse = false;\r\n                return data;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * filter rows for this form and return raw-rows. \r\n     * Note that the returned data is NOT set to any model before returning it the caller\r\n     */\r\n    public filter(filters?: FilterRequest): Observable<Vo[]> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_FILTER);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_FILTER + ' operation is not allowed.');\r\n        }\r\n        const payload = filters ? { data: filters } : {};\r\n        this.resetMessages();\r\n        this.waitingForServerResponse = false;\r\n        return this.serverAgent.serve(serviceName, payload).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                return vo.list as Vo[];\r\n            }),\r\n            catchError(msgs => {\r\n                console.error('catching error in filters fd', msgs)\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * filter rows for this form and return raw-rows. \r\n     * Note that the returned data is NOT set to any model before returning it the caller\r\n     */\r\n    public bulkUpdate(data: Vo[]): Observable<boolean> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_BULK);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_BULK + ' operation is not allowed.');\r\n        }\r\n        this.resetMessages();\r\n        this.waitingForServerResponse = true;\r\n\r\n        return this.serverAgent.serve(serviceName, { data: { list: data } }).pipe(\r\n            map(_vo => {\r\n                this.waitingForServerResponse = false;\r\n                return true;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * validate all editable fields in this form\r\n     */\r\n    public validateForm(): boolean {\r\n        this.formGroup.updateValueAndValidity();\r\n        let ok = this.formGroup.valid;\r\n        if (!ok) {\r\n            console.error('Form ' + this.form.getName() + ' validation failed. Fields in error:', this.getFieldsInError());\r\n        }\r\n\r\n        this.childData.forEach((fd) => {\r\n            const b = fd.validateForm();\r\n            ok = ok && b;\r\n        });\r\n        this.childTabularData.forEach((table) => {\r\n            const b = table.validateForm();\r\n            ok = ok && b;\r\n        });\r\n        return ok;\r\n    }\r\n\r\n    /**\r\n     * get list of invalid fields in this form.\r\n     * if a child is in error, this does not get the actualfield in the child, but return child itsemf as a field\r\n     */\r\n    public getFieldsInError(): string[] {\r\n        const result: string[] = [];\r\n        if (this.formGroup.valid) {\r\n            return result;\r\n        }\r\n        Object.keys(this.formGroup.controls).forEach((key: string) => {\r\n            const cntr = this.formGroup.controls[key];\r\n            if (cntr.invalid) {\r\n                result.push(key);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * should we convert this to a promise? Or should we have some standard way of handling error and success?\r\n     */\r\n    public saveAsNew(): Observable<Vo> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_NEW);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_NEW + ' operation is not allowed.');\r\n        }\r\n\r\n        if (!this.validateForm()) {\r\n            //we have to ensure that the field in error is brought to focus!!\r\n            return Observable.throwError('One or more fields are in error. Please edit them and re-submit');\r\n        }\r\n        const data = this.extractAll();\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data }, !this.form.serveGuests).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.setErrorFields(msgs)\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                console.error(msgs);\r\n                throw new Error(\"Server returned with errors \");\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param msgs fields in error sent by the server\r\n     * Manually setting error state to the fields sent by the server\r\n     */\r\n    public setErrorFields(msgs: any[]) {\r\n        msgs.forEach(element => {\r\n            this.formGroup.get(element.fieldName).setErrors({ 'Invalid': true });\r\n            this.formGroup.markAllAsTouched();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * update operation. WHat do we do after successful operation?\r\n     */\r\n    public save() : Observable<Vo> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_UPDATE);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_UPDATE + ' operation is not allowed.');\r\n        }\r\n\r\n        if (!this.validateForm()) {\r\n            //we have to ensure that the field in error is brought to focus!!\r\n            return Observable.throwError('Fileds that have errors :' + this.getFieldsInError().join(','));\r\n        }\r\n        const data = this.extractAll();\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data }, !this.form.serveGuests).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                //we do not set back values in updaetmode\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * delete this entity\r\n     */\r\n    public delete(): Observable<Vo> {\r\n        const serviceName = this.form.getServiceName(Conventions.OP_DELETE);\r\n        if (!serviceName) {\r\n            return Observable.throwError(Conventions.OP_DELETE + ' operation is not allowed.');\r\n        }\r\n\r\n        const data = this.extractKeyFields();\r\n        this.waitingForServerResponse = true;\r\n        this.resetMessages();\r\n        return this.serverAgent.serve(serviceName, { data: data, asQueryParams: false }).pipe(\r\n            map(vo => {\r\n                this.waitingForServerResponse = false;\r\n                //we do not set back values into fd\r\n                return vo;\r\n            }),\r\n            catchError(msgs => {\r\n                this.waitingForServerResponse = false;\r\n                this.setMessages(msgs);\r\n                throw msgs;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param voArray ~ array of Vo \r\n     * @param form ~ form of the fd\r\n     * @param sa ~ ServerAgent\r\n     * @returns vo as an array of FD \r\n     * Generally used in bulk update operations\r\n     */\r\n    public toFdArray(voArray: Vo[], form: any, sa: ServiceAgent) {\r\n        let fdArray: FormData[] = [];\r\n        voArray.forEach(vo => {\r\n            const fd = form.newFormData(sa);\r\n            fd.setAll(vo);\r\n            fdArray.push(fd);\r\n        });\r\n        return fdArray;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param fdArray ~ Array of FormData to be converted to\r\n     * @returns an array of vo \r\n     * Generally used in bulk update operations\r\n     */\r\n    public toVoArray(fdArray: FormData[]) {\r\n        let voArray: Vo[] = [];\r\n        fdArray.forEach(fd => {\r\n            voArray.push(fd.extractAll());\r\n        })\r\n        return voArray;\r\n    }\r\n}\r\n/**\r\n * represents the data contained in a form. Manages two-way binding with input fields in the form\r\n */\r\nexport class FormData extends PanelData {\r\n\t/**\r\n\t * list of options/values for all drop-downs in this form. \r\n     * html components should bind the drop-downs to a member in this \r\n\t */\r\n    lists: { [key: string]: SelectOption[] };\r\n\r\n    constructor(f: Form, sa: ServiceAgent) {\r\n        super(f, sa);\r\n        this.hasFg = true;\r\n        const ctrls = this.form.controls;\r\n        this.form.fields.forEach((field, key) => {\r\n            const ctrl = ctrls.get(key) || [];\r\n            const fc = new FormControl(field.defaultValue, ctrl);\r\n            this.formGroup.addControl(key, fc);\r\n        });\r\n\r\n        this.handleDropDowns(f);\r\n    }\r\n\r\n    public setAList(name: string, list: SelectOption[]): void {\r\n        const field = this.formGroup.get(name);\r\n        if (!field) {\r\n            console.error(name + ' is not a field but a drop-down is being set to it');\r\n            return;\r\n        }\r\n        this.lists[name] = list;\r\n        if (!field.value) {\r\n            let value: any = '';\r\n            if (list && list[0]) {\r\n                value = list[0].value;\r\n            }\r\n            if (value) {\r\n                field.setValue(value);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n\t * set drop-down list of values for a field. \r\n\t * it may be available locally, or we my have to get it from the server\r\n\t * @param field for which drop-down list id to be fetched\r\n     * @param key value of the key field,if this is a keyed-list\r\n\t */\r\n    public setListValues(field: Field, key: string): void {\r\n        if (field.listKey && !key) {\r\n            this.setAList(field.name, []);\r\n            return;\r\n        }\r\n        if (field.keyedList) {\r\n            /*\r\n             * design-time list. locally avaliable\r\n             */\r\n            let arr = field.keyedList[key];\r\n            if (!arr) {\r\n                console.error('Design time list of values for drop-down not available for key=' + key);\r\n                arr = [];\r\n            }\r\n            this.setAList(field.name, arr);\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * we have to ask the server to get this\r\n         */\r\n        let data: any;\r\n        if (field.listKey) {\r\n            data = { list: field.listName, key: key };\r\n        } else {\r\n            data = { list: field.listName };\r\n        }\r\n\r\n        const obs = this.serverAgent.serve(Conventions.SERVICE_LIST, { data: data });\r\n        obs.subscribe(vo => {\r\n            const arr = vo['list'] as SelectOption[];\r\n            if (arr) {\r\n                this.setAList(field.name, arr);\r\n            } else {\r\n                console.error('Server returned a respnse with no list in it. Drop downwill not work for field ' + field.name)\r\n            }\r\n        }, msgs => {\r\n            console.error('Error while receiving list values for field ' + field.name + JSON.stringify(msgs));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param f form for which we are handling drop-downs.\r\n     */\r\n    private handleDropDowns(f: Form): void {\r\n        if (!f.listFields) {\r\n            return null;\r\n        }\r\n        this.lists = {};\r\n        f.listFields.forEach(nam => {\r\n            const field = f.fields.get(nam);\r\n            if (field.valueList) {\r\n                this.setAList(nam, field.valueList);\r\n            } else {\r\n                this.setAList(nam, []);\r\n                if (field.listKey) {\r\n                    const fc = this.formGroup.get(field.listKey) as FormControl;\r\n                    if (!fc) {\r\n                        console.error(\"Unable to find form control named \" + field.listKey + \" drop down for field \" + field.name + \" will not work properly\");\r\n                    } else {\r\n                        const val = fc.value;\r\n                        if (val) {\r\n                            this.setListValues(field, val);\r\n                        }\r\n                        fc.valueChanges.subscribe((value: string) => this.setListValues(field, value));\r\n                    }\r\n                } else {\r\n                    //fixed list, but we have to get it from server at run time\r\n                    this.setListValues(field, null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * validate all editable fields in this form\r\n     */\r\n    public validateForm(): boolean {\r\n        this.formGroup.updateValueAndValidity();\r\n        if (!this.formGroup.valid) {\r\n            this.formGroup.setErrors({ 'err': 'Please enter a valid value' });\r\n            this.formGroup.markAllAsTouched();\r\n            return false;\r\n        }\r\n\r\n        const vals = this.form.validations;\r\n        let allOk = true;\r\n        if (vals) {\r\n            for (const v of this.form.validations) {\r\n                /**\r\n                 * n is name, f is field, c is cntrol and v is value\r\n                 */\r\n                const n1 = v.f1;\r\n                const n2 = v.f2;\r\n                const f1 = this.form.fields.get(n1);\r\n                const f2 = this.form.fields.get(n2);\r\n                const v1 = this.getFieldValue(n1);\r\n                const v2 = this.getFieldValue(n2);\r\n                const c1 = this.formGroup.get(n1);\r\n                const c2 = this.formGroup.get(n2);\r\n\r\n                let isDateType = false;\r\n                if (f1 && f2 && f1.valueType == Conventions.TYPE_DATE && f2.valueType == Conventions.TYPE_DATE) {\r\n                    isDateType = true;\r\n                }\r\n                const valType = v.type;\r\n                let ok: boolean;\r\n                if (valType === 'range') {\r\n                    ok = this.validateRange(v1, v2, v.isStrict, isDateType);\r\n                } else if (valType === 'incl') {\r\n                    ok = this.validateInclPair(v1, v2, v.value);\r\n                } else if (valType === 'excl') {\r\n                    ok = this.validateExclPair(v1, v2, v.atLeastOne);\r\n                } else {\r\n                    console.error('Form validation type ' + valType + ' is not valid. validation ignored');\r\n                    ok = true;\r\n                }\r\n                if (!ok) {\r\n                    console.error('Inter field validation failed');\r\n                    const err = { interfield: valType, errorId: v.errorId };\r\n                    if (c1 && f1.controlType != 'Hidden' && f1.controlType != 'Output') {\r\n                        c1.setErrors(err);\r\n                    }\r\n                    if (c2 && f2.controlType != 'Hidden' && f2.controlType != 'Output') {\r\n                        c2.setErrors(err);\r\n                    }\r\n                    allOk = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!allOk) {\r\n            console.error('Inter-field validaiton failed');\r\n            return false;\r\n        }\r\n\r\n        this.childData.forEach((fd, key) => {\r\n            const b = fd.validateForm();\r\n            if (!b) {\r\n                console.error('Child validation failed');\r\n            }\r\n            allOk = allOk && b;\r\n        });\r\n        this.childTabularData.forEach((table, key) => {\r\n            const b = table.validateForm();\r\n            if (!b) {\r\n                console.error('Child Table validation failed');\r\n            }\r\n            allOk = allOk && b;\r\n        });\r\n        return allOk;\r\n    }\r\n\t/**\r\n\t * check if v1 to v2 us a range\r\n\t * @param v1 \r\n\t * @param v2 \r\n\t * @param useStrict if true, v2 must be > v2, v1 == v2 woudn't cut\r\n\t */\r\n    private validateRange(v1: any, v2: any, equalOk: boolean, dateType: boolean): boolean {\r\n        if (dateType) {\r\n            console.error('Date comparison not yet implementd. returning true');\r\n            return true;\r\n        }\r\n        const n1 = v1;\r\n        const n2 = v2;\r\n        if (isNaN(n1) || isNaN(n2)|| n2 > n1) {\r\n            return true;\r\n        }\r\n        if (n1 > n2) {\r\n            return false;\r\n        }\r\n        //equal. is it ok?\r\n        return equalOk;\r\n    }\r\n\r\n\t/**\r\n\t * two fields have to be both specified or both skipped.\r\n\t * if value is specified, it means that the rule is applicable if v1 == value\r\n\t * @param v1 \r\n\t * @param v2 \r\n\t * @param value \r\n\t */\r\n    private validateInclPair(v1, v2, value): boolean {\r\n\t\t/*\r\n\t\t * we assume v1 is specified when a value is given. \r\n\t\t * However, if value is specified, then it has to match it' \r\n\t\t */\r\n        const v1Specified = v1 && (!value || value == v1);\r\n        if (v1Specified) {\r\n            if (v2) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        // v1 is not specified, so v2 should not be specified\r\n        if (v2) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n\t * \r\n\t * @param errorId v1 and v2 are exclusive\r\n\t * @param primaryField \r\n\t * @param otherField \r\n\t * @param atLeastOne if true, exactly one of teh twoto be specified\r\n\t */\r\n    private validateExclPair(v1, v2, noneOk: boolean): boolean {\r\n        if (v1) {\r\n            if (v2) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (v2) {\r\n            return true;\r\n        }\r\n        //none specifield, is it ok?\r\n        return noneOk;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param fieldName name of the drop-down field\r\n     * @returns the displayed value (not the internal value) of this field\r\n     */\r\n    public getDisplayedValueOf(fieldName: string): string {\r\n        const list = this.lists[fieldName];\r\n        if (!list) {\r\n            return '';\r\n        }\r\n        const val = this.getFieldValue(fieldName);\r\n        if (!val) {\r\n            return '';\r\n        }\r\n        const n = list.length;\r\n        for (let i = 0; i < n; i++) {\r\n            const sel = list[i];\r\n            if (sel.value == val) {\r\n                return sel.text;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * represents an array of panel data or form data\r\n */\r\nexport class TabularData {\r\n    public childData: Array<PanelData | FormData> = [];\r\n    constructor(public readonly form: Form, private serverAgent: ServiceAgent, public readonly isEditable: boolean) {\r\n    }\r\n\r\n    /**\r\n     * set data to this panel\r\n     * @param data \r\n     */\r\n    setAll(data: Vo[]): void {\r\n        this.childData.length = 0;\r\n        data.forEach(vo => {\r\n            let fd: PanelData | FormData;\r\n            if (this.isEditable) {\r\n                fd = new FormData(this.form, this.serverAgent);\r\n            } else {\r\n                fd = new PanelData(this.form, this.serverAgent)\r\n            }\r\n            fd.setAll(vo);\r\n            this.childData.push(fd);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * extract data from each of the child-panel into an array\r\n     */\r\n    extractAll(): Vo[] {\r\n        const data: Vo[] = [];\r\n        this.childData.forEach(fd => data.push(fd.extractAll()));\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * validate all the forms\r\n     * @returns true if all ok. false if any one form-control is in error, or any custom-validaiton fails\r\n     */\r\n    validateForm(): boolean {\r\n        let allOk = true;\r\n        this.childData.forEach(fd => {\r\n            const ok = fd.validateForm();\r\n            allOk = allOk && ok;\r\n        });\r\n        return allOk;\r\n    }\r\n\r\n    /**\r\n     * append a default data model to this array\r\n     */\r\n    appendRow(): PanelData | FormData {\r\n        let fd: PanelData | FormData;\r\n        if (this.isEditable) {\r\n            fd = new FormData(this.form, this.serverAgent);\r\n        } else {\r\n            fd = new PanelData(this.form, this.serverAgent);\r\n        }\r\n        this.childData.push(fd);\r\n        return fd;\r\n    }\r\n    /**\r\n      * append a default data model to this array\r\n      */\r\n    removeRow(idx: number) {\r\n        this.childData.splice(idx);\r\n    }\r\n\r\n}","import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ClientConfig } from './clientConfig';\nimport { Conventions } from './conventions';\nimport { Vo, ServerResponse, FilterRequest } from './types';\nimport { Observable } from 'rxjs';\nimport { ClientContext } from './clientContext';\nimport 'rxjs/add/operator/map';\nimport { Form } from './form';\nimport { catchError, map } from 'rxjs/operators';\nimport 'rxjs/add/observable/throw';\nimport { MessageService } from 'src/app/services/messageService';\n\n@Injectable({ providedIn: 'root' })\n/**\n * A wrapper on HttpClient to take care of our protocols\n * Draws heavily on Observables. If you are tounderstand/maintain this code,  you MUST be thorough with the Observables\n */\nexport class ServiceAgent {\n\tconstructor(private http: HttpClient, private config: ClientConfig, private ctx: ClientContext,private ms:MessageService) {\n\t}\n\n\t/**\n\t * serve this service. we use a strict service oriented architecture, \n\t * where in the only thing the client can ask the server is to serve a service.\n\t * There is no concept of resources or operations. Any such concepts are to be \n\t * implemented using the service paradigm. \n\t * @param serviceName  name of the service to be requested\n\t * @param data input data for the request\n\t * @param asQueryParams true if the data is just a set of name-string params, and the srver expects them in query string\n\t * @param headers any special headers to be communicated. Typically for additional authentication.\n\t * @param withAuth true if the request is to be sent with auth. If auth is not present, this wil trigger a login\n\t */\n\tpublic serve(serviceName: string,\n\t\toptions: { data?: Vo | FilterRequest, asQueryParams?: boolean, headers?: { [key: string]: string } } = {},\n\t\twithAuth: boolean = true): Observable<Vo> {\n\n\t\tconst token = this.ctx.getToken();\n\t\tif (withAuth && !token) {\n\t\t\t//not logged-in.To be re-tried after  a successful login\n\t\t\treturn this.notLoggedIn({ serviceName: serviceName, options: options, withAuth: withAuth });\n\t\t}\n\t\tconst headers = options.headers || {};\n\t\theaders[Conventions.HEADER_SERVICE] = serviceName;\n\t\tif (withAuth) {\n\t\t\theaders[Conventions.HEADER_AUTH] = token;\n\t\t}\n\t\tlet data = options.data || null;\n\t\tlet params = null;\n\t\tif (data && options.asQueryParams) {\n\t\t\tparams = this.toParams(data);\n\t\t}\n\t\tconst obs = this.http.post<ServerResponse>(this.config.url, data, { observe: \"response\", headers: headers, params: params });\n\t\treturn obs.map(resp => {\n\t\t\tif (!resp.ok) {\n\t\t\t\tconst msg = 'Server Error. http-status :' + resp.status + '=' + resp.statusText + (resp.body ? 'Response: ' + JSON.stringify(resp.body) : '');\n\t\t\t\tconsole.error(msg);\n\t\t\t\tthrow { type: 'error', id: 'serverError', text: msg };\n\t\t\t}\n\t\t\t//no-news is good-news!!\n\t\t\tif (!resp.body || resp.body === {}) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tconst { messages, allOk, data, token } = resp.body;\n\t\t\tif (allOk) {\n\t\t\t\tif(token){\n\t\t\t\t\tthis.ctx.setToken(token);\n\t\t\t\t}\n\t\t\t\tif(messages){\n\t\t\t\t\tif(messages[0].type == 'info'){\n\t\t\t\t\t\tthis.ms.showInfo(messages[0].text);\n\t\t\t\t\t\tthrow messages;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (messages) {\n\t\t\t\tthis.ms.showError(messages[0].text as string);\n\t\t\t\tconsole.error('Server returned with errors :', messages);\n\t\t\t\tthrow messages;\n\t\t\t}\n\t\t\tconst msg = 'Server Error. server reported a failure, but did not return any error message';\n\t\t\tconsole.error(msg);\n\t\t\tthrow [{ type: 'error', id: 'serverError', text: msg }];\n\t\t});\n\t}\n    /**\n     * filter rows for a form and return raw-rows. \n     * Note that the returned data is NOT set to any model before returning it the caller\n     */\n    public filter(form:Form, filters: FilterRequest): Observable<Vo[]> {\n        const serviceName = form.getServiceName(Conventions.OP_FILTER);\n        if (!serviceName) {\n            return Observable.throwError(Conventions.OP_FILTER + ' operation is not allowed.');\n        }\n\n        const obs = this.serve(serviceName, { data: filters });\n        return obs.pipe(\n            map(vo => {\n                return vo.list as Vo[];\n            }),\n            catchError(msgs => {\n\t\t\t\tconsole.error('catching in sa')\n                throw msgs;\n            })\n        );\n    }\n\t/**\n\t * \n\t * @param call parameters for serve that was interrupted.\n\t * We have to design a way to return an observable that works after a successful login.\n\t */\n\tprivate notLoggedIn(params: any): Observable<Vo> {\n\t\t/**\n\t\t * what we want to do is:\n\t\t * 1. show a modal panel and accept credentials.\n\t\t * 2. call login service with these credentials.\n\t\t * 3. on successful login, make this service request again.\n\t\t * Logic would be quite tricky becaue we have t0 return an observable right now that triggers all these..\n\t\t ^ for te time being, we just throw-up our hands!!!\n\t\t */\n\t\tconst msg = 'Sorry you are not logged in. Please try again after logging in';\n\t\tthis.ms.showError('OOPS! Your Account was logged out! Please Login Again!')\n\t\tthis.ctx.logout();\n\t\treturn new Observable((observer) => {\n\t\t\tconst { next, error } = observer;\n\t\t\terror('msg');\n\t\t});\n\t}\n\n\tprivate toParams(data: any): HttpParams {\n\t\tlet params = new HttpParams();\n\t\tfor (const a in data) {\n\t\t\tif (data.hasOwnProperty(a)) {\n\t\t\t\tconst val = data[a] || \"\";\n\t\t\t\tparams.set(a, val.toString());\n\t\t\t}\n\t\t}\n\t\treturn params;\n\t}\n\t/**\n\t * initiates a file-down load by the browser with supplied data as content\n\t * @param data  to be downloaded\n\t * @param fileName naem of the file to be downloaded as \n\t */\n\tpublic download(data: any, fileName: string) {\n\t\tconst json = JSON.stringify(data);\n\t\tconst blob = new Blob([json], { type: 'octet/stream' });\n\t\tconst url = window.URL.createObjectURL(blob);\n\t\tconst a = window.document.createElement('a');\n\t\ta.style.display = 'none';\n\t\ta.href = url;\n\t\ta.target = '_blank';\n\t\ta.download = fileName;\n\t\tdocument.body.appendChild(a);\n\t\ta.click();\n\t\tdocument.body.removeChild(a);\n\t}\n}\n","\nimport { Form , Field, ChildForm } from '../form/form';\nimport { FormData } from '../form/formData';\nimport { SelectOption, Vo } from '../form/types';\nimport { Validators } from '@angular/forms'\nimport { ServiceAgent} from '../form/serviceAgent';\n\nexport class CustomerForm extends Form {\n\tprivate static _instance = new CustomerForm();\n\tcustomerId:Field = {\n\t\tname:'customerId'\n\t\t,controlType: 'Hidden'\n\t\t,label: 'customerId'\n\t\t,valueType: 1\n\t\t,errorId: 'invalidFlexibleId'\n\t\t,minValue: -1\n\t\t,maxValue: 9999999999999\n\t};\n\tname:Field = {\n\t\tname:'name'\n\t\t,controlType: 'Input'\n\t\t,label: 'Customer Name'\n\t\t,isRequired: true\n\t\t,valueType: 0\n\t\t,errorId: 'invalidName'\n\t\t,maxLength: 150\n\t};\n\temail:Field = {\n\t\tname:'email'\n\t\t,controlType: 'Input'\n\t\t,label: 'Email for Customer'\n\t\t,isRequired: true\n\t\t,valueType: 0\n\t\t,errorId: 'invalidEmail'\n\t\t,maxLength: 1000\n\t};\n\taddressLine1:Field = {\n\t\tname:'addressLine1'\n\t\t,controlType: 'Textarea'\n\t\t,label: 'Address Line 1'\n\t\t,valueType: 0\n\t\t,errorId: 'invalidText'\n\t\t,maxLength: 1000\n\t};\n\n\tpublic static getInstance(): CustomerForm {\n\t\treturn CustomerForm._instance;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.serveGuests = true;\n\t\tthis.fields = new Map();\n\t\tthis.controls = new Map();\n\t\tthis.controls.set('customerId', [Validators.min(-1), Validators.max(9999999999999)]);\n\t\tthis.fields.set('customerId', this.customerId);\n\t\tthis.controls.set('name', [Validators.required, Validators.maxLength(150)]);\n\t\tthis.fields.set('name', this.name);\n\t\tthis.controls.set('email', [Validators.required, Validators.email, Validators.maxLength(1000)]);\n\t\tthis.fields.set('email', this.email);\n\t\tthis.controls.set('addressLine1', [Validators.maxLength(1000)]);\n\t\tthis.fields.set('addressLine1', this.addressLine1);\n\t\tthis.opsAllowed = {create: true, update: true};\n\t\tthis.keyFields = [\"customerId\"];\n\t}\n\n\tpublic getName(): string {\n\t\t return 'customer';\n\t}\n}\n\n\nexport class CustomerFd extends FormData {\n\tconstructor(form: CustomerForm, sa: ServiceAgent) {\n\t\tsuper(form, sa);\n\t}\n\n\tsetFieldValue(name: 'customerId' | 'name' | 'email' | 'addressLine1', value: string | number | boolean | null ): void {\n\t\tsuper.setFieldValue(name, value);\n\t}\n\n\tgetFieldValue(name: 'customerId' | 'name' | 'email' | 'addressLine1' ): string | number | boolean | null {\n\t\treturn super.getFieldValue(name);\n\t}\n}\n\n\nexport interface CustomerVo extends Vo {\n\tcustomerId?: number, \n\tname?: string, \n\taddressLine1?: string, \n\temail?: string\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { RouterService } from '../services/routerService';\nimport { RouterModule } from '@angular/router';\nimport { ElementsModule } from '../framework-modules/elements/elements'\nimport { HttpClientModule } from '@angular/common/http';\nimport { MessageService } from '../services/messageService';\nimport { NonSessionComponent } from './non-session/component';\nimport { LandingComponent } from './non-session/landing-page/component';\nimport { ExampleComponent } from './non-session/landing-page/sample-page/component';\n\n\n/**\n * Do not import any angular material module in this file unless it it the only option\n * Material modules to be imported in '../framework-modules/elements/elements.ts'\n */\n\n@NgModule({\n    declarations: [\n        /**\n         * All components to be declared here\n         */\n        /**\n        * Landing Componenet\n        */\n        NonSessionComponent,\n        LandingComponent,\n        /**\n         * Non Session Group Panels\n         */\n        ExampleComponent,\n        /**\n         * Session Group Panels\n         */\n    ],\n    imports: [\n        RouterModule,\n        ElementsModule,\n        HttpClientModule,\n    ],\n    providers: [],\n    bootstrap: [],\n    exports: [\n        /**\n         * App Components\n         */\n        RouterModule,\n        ElementsModule,\n        HttpClientModule,\n        /**\n         * All components to be declared here\n         */\n        /**\n        * Landing Componenet\n        */\n        NonSessionComponent,\n        LandingComponent,\n        /**\n         * Non Session Group Panels\n         */\n        ExampleComponent,\n        /**\n         * Session Group Panels\n         */\n    ],\n    schemas: []\n})\nexport class BaseModule {\n  static forRoot(): ModuleWithProviders<BaseModule> {\n    return {\n      ngModule: BaseModule,\n      providers: [\n        RouterService,\n        MessageService\n      ]\n    };\n  }\n\n}\n","import { Component, OnInit, ViewChild, ViewContainerRef, Type, ComponentFactoryResolver, Input } from '@angular/core';\nimport { LandingPanel, GroupPanel } from './interfaces';\nimport { LandingComponent } from './landing-page/component';\n \n/**\n * temp during development. will come from menuService\n */\nconst ROUTES: { [key: string]: Type<GroupPanel> } = {\n    Landing: LandingComponent,\n};\n\n\n@Component({\n  selector: 'app-non-session',\n  templateUrl: './component.html',\n  styleUrls: ['./component.scss'],\n})\n\nexport class NonSessionComponent implements LandingPanel,OnInit {\n\n  menu: { [key: string]: Type<GroupPanel> };\n\n  selected:boolean = false;\n  c:ComponentFactoryResolver;\n\n\n  @ViewChild(\"primaryContainer\", {static:true,read: ViewContainerRef }) container: ViewContainerRef;\n  sideNav: Array<any> = [];\n  sideNavLength: number = 0;\n  selectedSideNavItem: string;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver ) { }\n \n  ngOnInit() {\n    /**\n     * after we write menuService, we will use it this way.\n     * this.menus = this.menuService.getMainMenu();\n     */\n    this.menu = ROUTES;\n    this.navigate('Landing');\n  }\n\n  /**\n   * \n   * @param panelName landing panel to be opened in the container\n   * @param data any optional data t be passed to the landing panel\n   */\n  public navigate(panelName: string,data?: any): void {\n    \n    this.container.clear();\n    const factory = this.componentFactoryResolver.resolveComponentFactory(this.menu[panelName]);\n    const c = this.container.createComponent(factory);\n    c.instance.parentPanel = this;\n    c.instance.inputData = data;\n    c.changeDetectorRef.detectChanges();\n  }\n  \n  navigation(moduleId)\n  { \n    this.selected=true;\n    this.navigate(moduleId);\n    }\n}\n","<ng-container #primaryContainer></ng-container>","import { Component,OnInit,Input,ViewChild,ViewContainerRef,Type,ComponentFactoryResolver} from \"@angular/core\";\nimport { DynamicPanel,GroupPanel } from '../interfaces'\nimport { NonSessionComponent } from '../component';\nimport { ExampleComponent } from './sample-page/component';\n\n\n/**\n Const to map the screen-component to screen-name to rended the facotry \n */\nconst MENU: { [key: string]:{comp:Type<DynamicPanel>,subTitle?:string}} = {\n    Login: {comp:ExampleComponent },\n\n};\n\n\n@Component({\n  selector: \"app-landing-page\",\n  templateUrl: \"./component.html\",\n  styleUrls: [\"./component.scss\"]\n})\nexport class LandingComponent implements OnInit, GroupPanel {\n  @Input() inputData: any;\n  @Input() parentPanel: NonSessionComponent;\n  menu: { [key: string]: Type<DynamicPanel> };\n  sidenav:boolean = false;\n  displayNames:{}\n  cardHeader:any;\n  /**\n    container for the child page loaded from the seconday navbar \n   */\n\n  @ViewChild(\"secondaryContainer\", {static:true,read: ViewContainerRef }) container: ViewContainerRef;\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) {}\n  \n  ngOnInit() {\n    this.cardHeader=\"Students\";\n    /**\n     Navigate to Student List page on app load\n     */\n    this.navigate(\"Login\", {});\n  }\n\n  /**\n   *\n   * @param compName is the name of the component to navigate to\n   * @param data is for any related data needed\n   */\n\n  public navigate(compName: string, data: any): void {\n    this.container.clear();\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      MENU[compName].comp\n    );\n    const c = this.container.createComponent(factory);\n    c.instance.inputData = data;\n    c.instance.parentPanel = this;\n    c.changeDetectorRef.detectChanges();\n  }\n}\n","<ng-container #secondaryContainer></ng-container>","import { Component, Input } from '@angular/core';\nimport { ServiceAgent } from 'src/app/framework-modules/formdata/form/serviceAgent';\nimport { FormData } from 'src/app/framework-modules/formdata/form/formData';\nimport { NonSessionComponent } from '../../component';\nimport { DynamicPanel, GroupPanel } from '../../interfaces';\nimport { CustomerFd, CustomerForm } from 'src/app/framework-modules/formdata/gen/customerForm';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './component.html',\n  styleUrls: ['./component.scss']\n})\n\nexport class ExampleComponent implements DynamicPanel {\n  @Input() inputData: any;\n  @Input() parentPanel: GroupPanel;\n  @Input() session: NonSessionComponent;\n\n  public form: CustomerForm;\n  public fd: CustomerFd;\n  public constructor(public sa: ServiceAgent) {\n    this.form = CustomerForm.getInstance();\n    this.fd = new FormData(this.form, this.sa);\n  }\n}","<app-mv-field-generator [fd]=\"fd\"></app-mv-field-generator>","import { Injectable } from \"@angular/core\";\n\n@Injectable()\n\nexport class ConstantsService {\n  public static ROUTE_NON_SESSION = \"non-session\";\n  public static ROUTE_SESSION = \"session\";\n}\n","import {Injectable} from \"@angular/core\";\nimport { MatSnackBar, MatSnackBarConfig } from \"@angular/material/snack-bar\"; \n@Injectable()\nexport class MessageService {\n   constructor(private snackBar: MatSnackBar) {}\n\n   showSuccess(message: string) {\n    const config = new MatSnackBarConfig();\n    config.panelClass = ['snackbar-success'];\n    config.duration = 3000;\n    this.snackBar.open(message, null, config);\n }\n   showError(message: string) {\n      const config = new MatSnackBarConfig();\n      config.panelClass = ['snackbar-error'];\n      config.duration = 3000;\n      this.snackBar.open(message, null, config);\n   }\n\n   showInfo(message: string) {\n      const config = new MatSnackBarConfig();\n      config.panelClass = ['snackbar-info'];\n      config.duration = 3000;\n      this.snackBar.open(message, null, config);\n   }\n   showDetail(message: string) {\n      const config = new MatSnackBarConfig();\n      config.horizontalPosition = 'end';\n      config.verticalPosition = 'bottom';\n      this.snackBar.open(message,null,config)\n   }\n   close(){\n      this.snackBar.dismiss();\n   }\n}","import { Injectable } from \"@angular/core\";\nimport { Router } from '@angular/router'\nimport { BehaviorSubject } from 'rxjs';\nimport { ConstantsService } from './constantsService';\n\nimport { Location } from '@angular/common';\n\n@Injectable()\n\nexport class RouterService {\n  private currentRoute = new BehaviorSubject<string>(\"\");\n  constructor(private router: Router) {\n    this.router.navigate\n  }\n\n  /* ----------------------------------General Routes-------------------------------*/\n  \n  openNonSession = function () {\n    this.doNavigation(ConstantsService.ROUTE_NON_SESSION);\n  }\n  public routeChangeListener = this.currentRoute.asObservable();\n};\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: true\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}